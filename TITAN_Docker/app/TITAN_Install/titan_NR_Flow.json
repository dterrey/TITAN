[
    {
        "id": "090e2edc9c6d1b96",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8d31b3f79add29b",
        "type": "tab",
        "label": "Triage Artefact Processor",
        "disabled": false,
        "info": ""
    },
    {
        "id": "44cf1917690496d8",
        "type": "tab",
        "label": "Log Analysis Tooling Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e13988923128d2e",
        "type": "tab",
        "label": "Chainsaw Brainmap",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "04752156b5b5fd4d",
        "type": "tab",
        "label": "Mitre ATT&CK Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c3602a6773d817e7",
        "type": "tab",
        "label": "Velociraptor Workflow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "25f311019f0d6662",
        "type": "tab",
        "label": "Slack Notifications",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "de1f8303de6271e1",
        "type": "tab",
        "label": "Malware Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2c32c57ee0c89b2b",
        "type": "tab",
        "label": "Network Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "610fd5cf8138bd6d",
        "type": "tab",
        "label": "Cloud Forensic Analysis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "018a08567380648f",
        "type": "tab",
        "label": "E01 / Universal Image Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ff0d2698d578dcb2",
        "type": "tab",
        "label": "VHD Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a3bca09fa64d5135",
        "type": "tab",
        "label": "VMDK Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb185f14c626bdfb",
        "type": "tab",
        "label": "VHDX Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b51775f24f84f581",
        "type": "tab",
        "label": "Test Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7fd75b92004ac098",
        "type": "tab",
        "label": "Detect Archive & Integrity Check",
        "disabled": false,
        "info": "This workflow identifies different types of archive types and runs integrity checks based on the archiving tool",
        "env": []
    },
    {
        "id": "bc372fc61e93398a",
        "type": "tab",
        "label": "Decompress Archive",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "727c4a56a7a15f93",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "43f940ed9ce785ce",
        "type": "subflow",
        "name": "v1.0 File Upload List Files",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": []
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "222508c268f888ed",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "244fc0573ec60042",
                        "port": 0
                    },
                    {
                        "id": "4ff9856167ce51f5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "3510c15249601134",
        "type": "subflow",
        "name": "v1.0 File Upload List Files (2)",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "db091c7d517dfe38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "38c0c4627f7598fc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "99b9aa06f6cfa92d",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2) (2)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "0e1233f801315aa4",
                        "port": 0
                    },
                    {
                        "id": "6ad68b10daf32bad",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "269d988a3c656ab5",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2) (3)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "64753e1a611512b1",
                        "port": 0
                    },
                    {
                        "id": "29a606050998ed80",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "6725aa1eff52fba6",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2) (2) (2)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "f144a4730bc46e4d",
                        "port": 0
                    },
                    {
                        "id": "395ff819c73b88ec",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "4f6b87ae.7d3bb",
        "type": "subflow",
        "name": "List Files",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "cf0b484b.b70c9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "13486428.bcfc4c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ]
    },
    {
        "id": "19ad2b6f.f11b85",
        "type": "subflow",
        "name": "FIle Upload",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "144a9c8f.af7e9b",
                        "port": 0
                    },
                    {
                        "id": "854a9fb8.a668a8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "43cf8e1501d17432",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2) (1)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "722015c459f5f55b",
                        "port": 0
                    },
                    {
                        "id": "27c2d691318c8efc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "09e75dca4c9b5986",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2) (2) (1)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "6fe62391a11cb8e3",
                        "port": 0
                    },
                    {
                        "id": "b48f23b52364791a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "97de5fa403c72243",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2) (3) (1)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "60352fcd2705bb82",
                        "port": 0
                    },
                    {
                        "id": "e0278cadfb4a60b1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "5e0187cf50a5b026",
        "type": "subflow",
        "name": "v1.0 File Upload Process (2) (2) (2) (1)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "57afcc6c20c95675",
                        "port": 0
                    },
                    {
                        "id": "a772f09e2337fa16",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "9219543f935faca2",
        "type": "subflow",
        "name": "FIle Upload (1)",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "04af89a71a442e97",
                        "port": 0
                    },
                    {
                        "id": "2c3e026f887814eb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "1f05e4b7e53a7b3c",
        "type": "global-config",
        "name": "global-config",
        "env": []
    },
    {
        "id": "db2dfcbad2821111",
        "type": "websocket-listener",
        "path": "ws/progress",
        "wholemsg": "false"
    },
    {
        "id": "c9327328597cd3bd",
        "type": "websocket-listener",
        "path": "192.168.46.151:5000/socket.io",
        "wholemsg": "false"
    },
    {
        "id": "985ecbc7.67a138",
        "type": "websocket-listener",
        "z": "b51775f24f84f581",
        "path": "/ws/simple",
        "wholemsg": "false"
    },
    {
        "id": "593b416f7925a9c3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "51e6bb361023da7b",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "56c835f449250c05",
        "type": "ui_tab",
        "name": "Basic Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "75b50dbfa3604467",
        "type": "ui_tab",
        "name": "CPU Dashboard",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4a6b592c4970dc8c",
        "type": "ui_tab",
        "name": "File Upload",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bfab5c48aa89a7d5",
        "type": "ui_tab",
        "name": "DFIR_NodeRED System Resource Monitor",
        "icon": "computer",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cb135bc2.cc3d9",
        "type": "ui_tab",
        "name": "Anomaly",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "19c22d46ed6ce5a6",
        "type": "ui_tab",
        "name": "upload 444",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e77c5599318d7fe9",
        "type": "ui_group",
        "name": "Default",
        "tab": "51e6bb361023da7b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c36683abfea464ab",
        "type": "ui_group",
        "name": "Button",
        "tab": "56c835f449250c05",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bf511c429347600b",
        "type": "ui_group",
        "name": "Analog",
        "tab": "56c835f449250c05",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "428ab78f5c4bf575",
        "type": "ui_group",
        "name": "Sense Hat Simulator ",
        "tab": "75b50dbfa3604467",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "5ff5147f8648a403",
        "type": "ui_group",
        "name": "CPU On/Off",
        "tab": "75b50dbfa3604467",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7d8254324b138095",
        "type": "ui_group",
        "name": "CPU Gauges",
        "tab": "75b50dbfa3604467",
        "order": 3,
        "disp": true,
        "width": "3"
    },
    {
        "id": "7ed671ae3cc4b57a",
        "type": "ui_group",
        "name": "Start/Stop",
        "tab": "51e6bb361023da7b",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6f30b1b001a9b330",
        "type": "ui_group",
        "name": "File upload",
        "tab": "4a6b592c4970dc8c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e0d4dcde7626ef90",
        "type": "ui_group",
        "name": "CPU Load",
        "tab": "bfab5c48aa89a7d5",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5ff0b34d73fe7838",
        "type": "ui_group",
        "name": "Memory",
        "tab": "bfab5c48aa89a7d5",
        "order": 3,
        "disp": true,
        "width": "6"
    },
    {
        "id": "919f51838b52e21a",
        "type": "ui_group",
        "name": "System Information",
        "tab": "bfab5c48aa89a7d5",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "f768bc7f4dcd5147",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "4a6b592c4970dc8c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6426525.5bfe1ac",
        "type": "ui_group",
        "name": "Default",
        "tab": "cb135bc2.cc3d9",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "ed78c3f2d9d2063a",
        "type": "ui_group",
        "name": "Upload New",
        "tab": "19c22d46ed6ce5a6",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "disabled": "false",
        "className": ""
    },
    {
        "id": "ae98c82ccb897014",
        "type": "ui_group",
        "name": "Upload New",
        "tab": "",
        "order": 1,
        "width": "6",
        "disabled": "false",
        "className": ""
    },
    {
        "id": "8b5ba8cdcdaa1cc2",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default"
    },
    {
        "id": "a0d5c26f30a87f57",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "2130590e793ec382",
        "type": "ui-theme",
        "name": "Basic Blue Theme",
        "colors": {
            "surface": "#4d58ff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "0b3daa94abc7cbfd",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "b38faedd465780d2",
        "type": "ui-theme",
        "name": "Admin Theme",
        "colors": {
            "surface": "#454545",
            "primary": "#d47e1c",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "41193376c0284784",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        }
    },
    {
        "id": "05b0a302dbcffd52",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a70602e73bbb2a95",
        "type": "ui-theme",
        "name": "Admin Theme",
        "colors": {
            "surface": "#454545",
            "primary": "#d47e1c",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "e6013c6f.69328",
        "type": "ui_tab",
        "name": "System",
        "icon": "computer"
    },
    {
        "id": "f1b5a1b6.543fd8",
        "type": "ui_tab",
        "name": "File Upload",
        "icon": "dashboard",
        "order": 4
    },
    {
        "id": "2b0ed5b4.6092ca",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a5dce473dff6e850",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "a0d5c26f30a87f57",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "57f5f4e3b78093b9",
        "type": "ui-page",
        "name": "Data Entry New",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/entry",
        "icon": "note-multiple",
        "layout": "grid",
        "theme": "2130590e793ec382",
        "order": 9,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "1c72c39cefdf8ad4",
        "type": "ui-page",
        "name": "Task Submission",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/submit-data",
        "icon": "form-textbox",
        "layout": "notebook",
        "theme": "0b3daa94abc7cbfd",
        "order": 6,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "074e90d740060739",
        "type": "ui-page",
        "name": "Admin View",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/admin",
        "icon": "lock",
        "layout": "grid",
        "theme": "b38faedd465780d2",
        "order": 8,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "94074231a3fd3462",
        "type": "ui-page",
        "name": "Your Tasks",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/tasks",
        "icon": "view-list-outline",
        "layout": "grid",
        "theme": "0b3daa94abc7cbfd",
        "order": 7,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9c6e5ede4f3c5463",
        "type": "ui-page",
        "name": "Data Dashboard",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/data",
        "icon": "gauge",
        "layout": "grid",
        "theme": "0b3daa94abc7cbfd",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9059535403d00e6f",
        "type": "ui-page",
        "name": "Page Name",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/",
        "icon": "",
        "layout": "grid",
        "theme": "41193376c0284784",
        "order": 5,
        "className": ""
    },
    {
        "id": "bc480fbb2fd49c21",
        "type": "ui-page",
        "name": "upload to table",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/page8",
        "icon": "home",
        "layout": "grid",
        "theme": "b38faedd465780d2",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "423be3e1ba866ab4",
        "type": "ui-page",
        "name": "Upload New",
        "ui": "8b5ba8cdcdaa1cc2",
        "path": "/page7",
        "icon": "home",
        "layout": "grid",
        "theme": "b38faedd465780d2",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "f90a248ea69daed4",
        "type": "ui-group",
        "name": "My Group",
        "page": "a5dce473dff6e850",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "a5ac65ae869c4d40",
        "type": "ui-group",
        "name": "Group Name",
        "page": "1c72c39cefdf8ad4",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ebd8d74c8d76dbaa",
        "type": "ui-group",
        "name": "Task List",
        "page": "074e90d740060739",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "82e85fa04a2fa891",
        "type": "ui-group",
        "name": "Tasks List",
        "page": "94074231a3fd3462",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "136bf7f9ce0bf97c",
        "type": "ui-group",
        "name": "Raspberry Pi Data",
        "page": "9c6e5ede4f3c5463",
        "width": "3",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "bceb9f6d7fefa49b",
        "type": "ui-group",
        "name": "CO2 Levels",
        "page": "9c6e5ede4f3c5463",
        "width": "4",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a5dafe217d54eb4e",
        "type": "ui-group",
        "name": "Group Name",
        "page": "9059535403d00e6f",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": ""
    },
    {
        "id": "8b040dd7e14d5a19",
        "type": "ui-group",
        "name": "CSV Table",
        "page": "9059535403d00e6f",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": ""
    },
    {
        "id": "4a496db773c871a8",
        "type": "ui-group",
        "name": "System Resources",
        "page": "074e90d740060739",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2d1d3e7a2bda2267",
        "type": "ui-group",
        "name": "Group Name",
        "page": "bc480fbb2fd49c21",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "7853403.230cdc",
        "type": "ui_group",
        "name": "CPU Load",
        "tab": "e6013c6f.69328",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "1d1da0fc.6ab84f",
        "type": "ui_group",
        "name": "Memory",
        "tab": "e6013c6f.69328",
        "order": 3,
        "disp": true,
        "width": "6"
    },
    {
        "id": "a9912d64.97094",
        "type": "ui_group",
        "name": "System Information",
        "tab": "e6013c6f.69328",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "4178bf61.05d97",
        "type": "ui_group",
        "name": "File upload",
        "tab": "f1b5a1b6.543fd8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2096c0c6.23221",
        "type": "ui_group",
        "name": "Default",
        "tab": "2b0ed5b4.6092ca",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8bd7229a2d52254a",
        "type": "http in",
        "z": "222508c268f888ed",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "1a45ddbb27edeee2",
                "9f80739c345e0843",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "939472bb0b454ebd",
        "type": "http response",
        "z": "222508c268f888ed",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "a1e6c23825b75bdf",
        "type": "link in",
        "z": "222508c268f888ed",
        "name": "refreshFileDropdown",
        "links": [
            "7098d634fb030f4a",
            "ff60845f929f159c"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "9a343af744e06862"
            ]
        ]
    },
    {
        "id": "2446953591899c0b",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1a45ddbb27edeee2",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "123b9e69cab4a903",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "b1751fd555954302",
        "type": "file",
        "z": "222508c268f888ed",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "244fc0573ec60042",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "001c04ad439bbc4b",
        "type": "inject",
        "z": "222508c268f888ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "9a343af744e06862"
            ]
        ]
    },
    {
        "id": "2305e13f2cadee4a",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "8d6c23213463686d"
            ]
        ]
    },
    {
        "id": "4ff9856167ce51f5",
        "type": "file",
        "z": "222508c268f888ed",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "ff60845f929f159c"
            ]
        ]
    },
    {
        "id": "ecb695364ad58344",
        "type": "switch",
        "z": "222508c268f888ed",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "4ff9856167ce51f5"
            ]
        ]
    },
    {
        "id": "843073f5f477c0e1",
        "type": "catch",
        "z": "222508c268f888ed",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "84b08301fac28e8a"
            ]
        ]
    },
    {
        "id": "84b08301fac28e8a",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "7c0ba388006365f1",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "ff60845f929f159c",
        "type": "link out",
        "z": "222508c268f888ed",
        "name": "refreshAfterDelete",
        "links": [
            "a1e6c23825b75bdf"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "7098d634fb030f4a",
        "type": "link out",
        "z": "222508c268f888ed",
        "name": "refreshAfterUpload",
        "links": [
            "a1e6c23825b75bdf"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "9f80739c345e0843",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "939472bb0b454ebd",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "9a343af744e06862",
        "type": "delay",
        "z": "222508c268f888ed",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4b59cd4f817539dd",
        "type": "watch",
        "z": "222508c268f888ed",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "9a343af744e06862"
            ]
        ]
    },
    {
        "id": "ac070e499f59101e",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "2e4fb172af1a331e"
            ]
        ]
    },
    {
        "id": "123b9e69cab4a903",
        "type": "switch",
        "z": "222508c268f888ed",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "b1751fd555954302",
                "79970e0aeaf9ad26"
            ],
            [
                "4133dd21e6d1cd93",
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "4133dd21e6d1cd93",
        "type": "function",
        "z": "222508c268f888ed",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "244fc0573ec60042",
        "type": "change",
        "z": "222508c268f888ed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "7098d634fb030f4a"
            ]
        ]
    },
    {
        "id": "5fa5a1fe33957f8c",
        "type": "watch",
        "z": "222508c268f888ed",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "79970e0aeaf9ad26",
        "type": "debug",
        "z": "222508c268f888ed",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "a0ac55dbe84c6ca8",
        "type": "http in",
        "z": "222508c268f888ed",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "d80c531e7ca81397",
        "type": "ui_button",
        "z": "222508c268f888ed",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "2305e13f2cadee4a"
            ]
        ]
    },
    {
        "id": "2e4fb172af1a331e",
        "type": "ui_dropdown",
        "z": "222508c268f888ed",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "2446953591899c0b"
            ]
        ]
    },
    {
        "id": "8d6c23213463686d",
        "type": "ui_toast",
        "z": "222508c268f888ed",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "ecb695364ad58344"
            ]
        ]
    },
    {
        "id": "7c0ba388006365f1",
        "type": "ui_toast",
        "z": "222508c268f888ed",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "df70311454c8581b",
        "type": "ui_template",
        "z": "222508c268f888ed",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "79970e0aeaf9ad26"
            ]
        ]
    },
    {
        "id": "af5447c63795c250",
        "type": "exec",
        "z": "3510c15249601134",
        "command": "ls",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "38c0c4627f7598fc"
            ],
            [],
            []
        ]
    },
    {
        "id": "38c0c4627f7598fc",
        "type": "change",
        "z": "3510c15249601134",
        "name": "split and filter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t    $files := [$split(payload, '\\n')[$ != \"\"]];\t    $count($env('EXTENSIONS')) = 0 ? [$files] : [$files[$split($, '.')[-1] in $env('EXTENSIONS')]];\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "db091c7d517dfe38",
        "type": "switch",
        "z": "3510c15249601134",
        "name": "",
        "property": "$env('DIRECTORY')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 80,
        "wires": [
            [
                "af5447c63795c250"
            ],
            [
                "8cf739e91a56e075"
            ]
        ]
    },
    {
        "id": "8cf739e91a56e075",
        "type": "change",
        "z": "3510c15249601134",
        "name": "DIRECTORY",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DIRECTORY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "af5447c63795c250"
            ]
        ]
    },
    {
        "id": "6e04a813753d719a",
        "type": "http in",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "789cf1f09ca55537",
                "64317e13cee425c0",
                "d5c07c733167c466"
            ]
        ]
    },
    {
        "id": "7d5cad36f3cf8980",
        "type": "http response",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "a1d4a99b5fcecb14",
        "type": "link in",
        "z": "99b9aa06f6cfa92d",
        "name": "refreshFileDropdown",
        "links": [
            "837c387fe9608395",
            "6d9bef5544b2d2a2"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "5467f04fb1c8ce0a"
            ]
        ]
    },
    {
        "id": "293fb54c1f30859b",
        "type": "change",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "789cf1f09ca55537",
        "type": "change",
        "z": "99b9aa06f6cfa92d",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "c5bfefd62762bf24",
                "d5c07c733167c466"
            ]
        ]
    },
    {
        "id": "bab4327d6ca0cb26",
        "type": "file",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "0e1233f801315aa4",
                "d5c07c733167c466"
            ]
        ]
    },
    {
        "id": "94de98071a94c8d2",
        "type": "inject",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "5467f04fb1c8ce0a"
            ]
        ]
    },
    {
        "id": "c44501cd25485806",
        "type": "change",
        "z": "99b9aa06f6cfa92d",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "ce2a8c9a7ecbc284"
            ]
        ]
    },
    {
        "id": "6ad68b10daf32bad",
        "type": "file",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "6d9bef5544b2d2a2"
            ]
        ]
    },
    {
        "id": "4932ff7df60a7555",
        "type": "switch",
        "z": "99b9aa06f6cfa92d",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "6ad68b10daf32bad"
            ]
        ]
    },
    {
        "id": "58d9b0a5695eec0f",
        "type": "catch",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "c5d15a110e41bc49"
            ]
        ]
    },
    {
        "id": "c5d15a110e41bc49",
        "type": "change",
        "z": "99b9aa06f6cfa92d",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "067a0c7b469557f9",
                "d5c07c733167c466"
            ]
        ]
    },
    {
        "id": "6d9bef5544b2d2a2",
        "type": "link out",
        "z": "99b9aa06f6cfa92d",
        "name": "refreshAfterDelete",
        "links": [
            "a1d4a99b5fcecb14"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "837c387fe9608395",
        "type": "link out",
        "z": "99b9aa06f6cfa92d",
        "name": "refreshAfterUpload",
        "links": [
            "a1d4a99b5fcecb14"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "64317e13cee425c0",
        "type": "change",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "7d5cad36f3cf8980",
                "d5c07c733167c466"
            ]
        ]
    },
    {
        "id": "5467f04fb1c8ce0a",
        "type": "delay",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f887defb8de90b7d",
        "type": "watch",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "5467f04fb1c8ce0a"
            ]
        ]
    },
    {
        "id": "a8c6fb81657fe193",
        "type": "change",
        "z": "99b9aa06f6cfa92d",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "fd79f74a4865badc"
            ]
        ]
    },
    {
        "id": "c5bfefd62762bf24",
        "type": "switch",
        "z": "99b9aa06f6cfa92d",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "bab4327d6ca0cb26",
                "d5c07c733167c466"
            ],
            [
                "af727dcd6b8721ee",
                "d5c07c733167c466"
            ]
        ]
    },
    {
        "id": "af727dcd6b8721ee",
        "type": "function",
        "z": "99b9aa06f6cfa92d",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "0e1233f801315aa4",
        "type": "change",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "837c387fe9608395"
            ]
        ]
    },
    {
        "id": "9156f77bbe7e63fd",
        "type": "watch",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d5c07c733167c466",
        "type": "debug",
        "z": "99b9aa06f6cfa92d",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "d7a619d01118d4ec",
        "type": "http in",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "55c3eed839fe9362",
        "type": "ui_button",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "c44501cd25485806"
            ]
        ]
    },
    {
        "id": "fd79f74a4865badc",
        "type": "ui_dropdown",
        "z": "99b9aa06f6cfa92d",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "293fb54c1f30859b"
            ]
        ]
    },
    {
        "id": "ce2a8c9a7ecbc284",
        "type": "ui_toast",
        "z": "99b9aa06f6cfa92d",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "4932ff7df60a7555"
            ]
        ]
    },
    {
        "id": "067a0c7b469557f9",
        "type": "ui_toast",
        "z": "99b9aa06f6cfa92d",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "2c09e2ce6489e514",
        "type": "ui_template",
        "z": "99b9aa06f6cfa92d",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "d5c07c733167c466"
            ]
        ]
    },
    {
        "id": "5404c805fd5f5cac",
        "type": "http in",
        "z": "269d988a3c656ab5",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "a706c3d3ebbb488b",
                "b862bfe99327eaca",
                "d53f77a722d88686"
            ]
        ]
    },
    {
        "id": "0362428607dfd213",
        "type": "http response",
        "z": "269d988a3c656ab5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "e6121217acf0c293",
        "type": "link in",
        "z": "269d988a3c656ab5",
        "name": "refreshFileDropdown",
        "links": [
            "77cbfc89f470cdce",
            "474734573ce0ddb3"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "63e740825dc2805b"
            ]
        ]
    },
    {
        "id": "bc1a58dd732efbb8",
        "type": "change",
        "z": "269d988a3c656ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a706c3d3ebbb488b",
        "type": "change",
        "z": "269d988a3c656ab5",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "267fa667a0afa66a",
                "d53f77a722d88686"
            ]
        ]
    },
    {
        "id": "3e5b3723183c58ae",
        "type": "file",
        "z": "269d988a3c656ab5",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "64753e1a611512b1",
                "d53f77a722d88686"
            ]
        ]
    },
    {
        "id": "a07439a531669c0a",
        "type": "inject",
        "z": "269d988a3c656ab5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "63e740825dc2805b"
            ]
        ]
    },
    {
        "id": "122575e03c8dcf30",
        "type": "change",
        "z": "269d988a3c656ab5",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "5dd7df62cc8e487d"
            ]
        ]
    },
    {
        "id": "29a606050998ed80",
        "type": "file",
        "z": "269d988a3c656ab5",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "474734573ce0ddb3"
            ]
        ]
    },
    {
        "id": "f16e1d1eeaefab68",
        "type": "switch",
        "z": "269d988a3c656ab5",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "29a606050998ed80"
            ]
        ]
    },
    {
        "id": "b09b54fad532effd",
        "type": "catch",
        "z": "269d988a3c656ab5",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "888af9d08a1099d7"
            ]
        ]
    },
    {
        "id": "888af9d08a1099d7",
        "type": "change",
        "z": "269d988a3c656ab5",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "b79c9dfeab5021da",
                "d53f77a722d88686"
            ]
        ]
    },
    {
        "id": "474734573ce0ddb3",
        "type": "link out",
        "z": "269d988a3c656ab5",
        "name": "refreshAfterDelete",
        "links": [
            "e6121217acf0c293"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "77cbfc89f470cdce",
        "type": "link out",
        "z": "269d988a3c656ab5",
        "name": "refreshAfterUpload",
        "links": [
            "e6121217acf0c293"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "b862bfe99327eaca",
        "type": "change",
        "z": "269d988a3c656ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "0362428607dfd213",
                "d53f77a722d88686"
            ]
        ]
    },
    {
        "id": "63e740825dc2805b",
        "type": "delay",
        "z": "269d988a3c656ab5",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f802582ab0195aa6",
        "type": "watch",
        "z": "269d988a3c656ab5",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "63e740825dc2805b"
            ]
        ]
    },
    {
        "id": "bbc6dfef6a0ed36f",
        "type": "change",
        "z": "269d988a3c656ab5",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "80b79939e3e43607"
            ]
        ]
    },
    {
        "id": "267fa667a0afa66a",
        "type": "switch",
        "z": "269d988a3c656ab5",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "3e5b3723183c58ae",
                "d53f77a722d88686"
            ],
            [
                "c2a33663b6d08845",
                "d53f77a722d88686"
            ]
        ]
    },
    {
        "id": "c2a33663b6d08845",
        "type": "function",
        "z": "269d988a3c656ab5",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "64753e1a611512b1",
        "type": "change",
        "z": "269d988a3c656ab5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "77cbfc89f470cdce"
            ]
        ]
    },
    {
        "id": "795e06a513da0347",
        "type": "watch",
        "z": "269d988a3c656ab5",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d53f77a722d88686",
        "type": "debug",
        "z": "269d988a3c656ab5",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "1bccd73a02da1d7e",
        "type": "http in",
        "z": "269d988a3c656ab5",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "80b79939e3e43607",
        "type": "ui_dropdown",
        "z": "269d988a3c656ab5",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "bc1a58dd732efbb8"
            ]
        ]
    },
    {
        "id": "3dad10c223c3114e",
        "type": "ui_button",
        "z": "269d988a3c656ab5",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "122575e03c8dcf30"
            ]
        ]
    },
    {
        "id": "5dd7df62cc8e487d",
        "type": "ui_toast",
        "z": "269d988a3c656ab5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "f16e1d1eeaefab68"
            ]
        ]
    },
    {
        "id": "b79c9dfeab5021da",
        "type": "ui_toast",
        "z": "269d988a3c656ab5",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "79881eb6bbcfb498",
        "type": "ui_template",
        "z": "269d988a3c656ab5",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "d53f77a722d88686"
            ]
        ]
    },
    {
        "id": "1859e0ed2612f4ec",
        "type": "http in",
        "z": "6725aa1eff52fba6",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "67b4b56c8443bf7b",
                "603561d5082cd142",
                "e59d27ce8de5dcd5"
            ]
        ]
    },
    {
        "id": "7e1f1e81feed4156",
        "type": "http response",
        "z": "6725aa1eff52fba6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "804ec85bf43c0cac",
        "type": "link in",
        "z": "6725aa1eff52fba6",
        "name": "refreshFileDropdown",
        "links": [
            "d3f5cbfe6ddaf34b",
            "388e8089dd8f5ac3"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "f8528718f722e86b"
            ]
        ]
    },
    {
        "id": "635877cc8297e0a1",
        "type": "change",
        "z": "6725aa1eff52fba6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "67b4b56c8443bf7b",
        "type": "change",
        "z": "6725aa1eff52fba6",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "2ee08761570db2bb",
                "e59d27ce8de5dcd5"
            ]
        ]
    },
    {
        "id": "5280d9a6225d67f4",
        "type": "file",
        "z": "6725aa1eff52fba6",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "f144a4730bc46e4d",
                "e59d27ce8de5dcd5"
            ]
        ]
    },
    {
        "id": "3bf6c4ec06d160f0",
        "type": "inject",
        "z": "6725aa1eff52fba6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "f8528718f722e86b"
            ]
        ]
    },
    {
        "id": "8c734d302af9ad09",
        "type": "change",
        "z": "6725aa1eff52fba6",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "b2855190ef63d8db"
            ]
        ]
    },
    {
        "id": "395ff819c73b88ec",
        "type": "file",
        "z": "6725aa1eff52fba6",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "388e8089dd8f5ac3"
            ]
        ]
    },
    {
        "id": "bb0f67f6424ab29a",
        "type": "switch",
        "z": "6725aa1eff52fba6",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "395ff819c73b88ec"
            ]
        ]
    },
    {
        "id": "cd3063a422324e08",
        "type": "catch",
        "z": "6725aa1eff52fba6",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "9e188f7738f7a017"
            ]
        ]
    },
    {
        "id": "9e188f7738f7a017",
        "type": "change",
        "z": "6725aa1eff52fba6",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "baea551d9a01b969",
                "e59d27ce8de5dcd5"
            ]
        ]
    },
    {
        "id": "388e8089dd8f5ac3",
        "type": "link out",
        "z": "6725aa1eff52fba6",
        "name": "refreshAfterDelete",
        "links": [
            "804ec85bf43c0cac"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "d3f5cbfe6ddaf34b",
        "type": "link out",
        "z": "6725aa1eff52fba6",
        "name": "refreshAfterUpload",
        "links": [
            "804ec85bf43c0cac"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "603561d5082cd142",
        "type": "change",
        "z": "6725aa1eff52fba6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "7e1f1e81feed4156",
                "e59d27ce8de5dcd5"
            ]
        ]
    },
    {
        "id": "f8528718f722e86b",
        "type": "delay",
        "z": "6725aa1eff52fba6",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3bbd45e9a5482fbd",
        "type": "watch",
        "z": "6725aa1eff52fba6",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "f8528718f722e86b"
            ]
        ]
    },
    {
        "id": "5fe60a3bd4896404",
        "type": "change",
        "z": "6725aa1eff52fba6",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "03d5dd48f41b8919"
            ]
        ]
    },
    {
        "id": "2ee08761570db2bb",
        "type": "switch",
        "z": "6725aa1eff52fba6",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "5280d9a6225d67f4",
                "e59d27ce8de5dcd5"
            ],
            [
                "866e3d646f786f74",
                "e59d27ce8de5dcd5"
            ]
        ]
    },
    {
        "id": "866e3d646f786f74",
        "type": "function",
        "z": "6725aa1eff52fba6",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "f144a4730bc46e4d",
        "type": "change",
        "z": "6725aa1eff52fba6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "d3f5cbfe6ddaf34b"
            ]
        ]
    },
    {
        "id": "323abf819a45ba48",
        "type": "watch",
        "z": "6725aa1eff52fba6",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e59d27ce8de5dcd5",
        "type": "debug",
        "z": "6725aa1eff52fba6",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "1936d77d50cdb0b9",
        "type": "http in",
        "z": "6725aa1eff52fba6",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "03d5dd48f41b8919",
        "type": "ui_dropdown",
        "z": "6725aa1eff52fba6",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "635877cc8297e0a1"
            ]
        ]
    },
    {
        "id": "f0d4d5bbf148ec83",
        "type": "ui_button",
        "z": "6725aa1eff52fba6",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "8c734d302af9ad09"
            ]
        ]
    },
    {
        "id": "b2855190ef63d8db",
        "type": "ui_toast",
        "z": "6725aa1eff52fba6",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "bb0f67f6424ab29a"
            ]
        ]
    },
    {
        "id": "baea551d9a01b969",
        "type": "ui_toast",
        "z": "6725aa1eff52fba6",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "3979ee2a3a8c2faa",
        "type": "ui_template",
        "z": "6725aa1eff52fba6",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "e59d27ce8de5dcd5"
            ]
        ]
    },
    {
        "id": "208379c0.81563e",
        "type": "exec",
        "z": "4f6b87ae.7d3bb",
        "command": "ls",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "13486428.bcfc4c"
            ],
            [],
            []
        ]
    },
    {
        "id": "13486428.bcfc4c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "split and filter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t    $files := [$split(payload, '\\n')[$ != \"\"]];\t    $count($env('EXTENSIONS')) = 0 ? [$files] : [$files[$split($, '.')[-1] in $env('EXTENSIONS')]];\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "cf0b484b.b70c9",
        "type": "switch",
        "z": "4f6b87ae.7d3bb",
        "name": "",
        "property": "$env('DIRECTORY')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 80,
        "wires": [
            [
                "208379c0.81563e"
            ],
            [
                "56426a5a.fbc44c"
            ]
        ]
    },
    {
        "id": "56426a5a.fbc44c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "DIRECTORY",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DIRECTORY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "208379c0.81563e"
            ]
        ]
    },
    {
        "id": "954c0325.f4f63",
        "type": "http in",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "7433a631.a7f58",
                "faf9ee8.6642a1"
            ]
        ]
    },
    {
        "id": "964d2a30.34e938",
        "type": "http response",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "1617f361.5dac2d",
        "type": "ui_template",
        "z": "19ad2b6f.f11b85",
        "group": "4178bf61.05d97",
        "name": "Upload",
        "order": 1,
        "width": "6",
        "height": "3",
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 120,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ea605dad.7b36a8",
        "type": "subflow:4f6b87ae.7d3bb",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "env": [
            {
                "name": "DIRECTORY",
                "type": "env",
                "value": "UPLOAD_DIR"
            },
            {
                "name": "EXTENSIONS",
                "type": "env",
                "value": "EXTENSIONS"
            }
        ],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "b42b38bf.d5a548"
            ]
        ]
    },
    {
        "id": "a425ba62.ff1df",
        "type": "ui_dropdown",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "4178bf61.05d97",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "62157c1a.4444bc"
            ]
        ]
    },
    {
        "id": "bdb6a329.8574b",
        "type": "link in",
        "z": "19ad2b6f.f11b85",
        "name": "refreshFileDropdown",
        "links": [
            "15ae2641.f1cc7a",
            "be23c76f.4a3988"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "f0813c91.8c7838"
            ]
        ]
    },
    {
        "id": "51272d56.830874",
        "type": "ui_button",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "group": "4178bf61.05d97",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "a0bbc93d.d6f6b8"
            ]
        ]
    },
    {
        "id": "62157c1a.4444bc",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7433a631.a7f58",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "63e6ebc1.1cc124"
            ]
        ]
    },
    {
        "id": "10c1284a.0e3f98",
        "type": "file",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "144a9c8f.af7e9b"
            ]
        ]
    },
    {
        "id": "af0d1f9b.6eb468",
        "type": "inject",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "f0813c91.8c7838"
            ]
        ]
    },
    {
        "id": "a0bbc93d.d6f6b8",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "3e909d09.b8b5f2"
            ]
        ]
    },
    {
        "id": "854a9fb8.a668a8",
        "type": "file",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "be23c76f.4a3988"
            ]
        ]
    },
    {
        "id": "3e909d09.b8b5f2",
        "type": "ui_toast",
        "z": "19ad2b6f.f11b85",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "a33238b4.01cae"
            ]
        ]
    },
    {
        "id": "a33238b4.01cae",
        "type": "switch",
        "z": "19ad2b6f.f11b85",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "854a9fb8.a668a8"
            ]
        ]
    },
    {
        "id": "b54a9427.62f75",
        "type": "catch",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "1a19fda8.e72fd2"
            ]
        ]
    },
    {
        "id": "563135cc.7b97e4",
        "type": "ui_toast",
        "z": "19ad2b6f.f11b85",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "1a19fda8.e72fd2",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "563135cc.7b97e4"
            ]
        ]
    },
    {
        "id": "be23c76f.4a3988",
        "type": "link out",
        "z": "19ad2b6f.f11b85",
        "name": "refreshAfterDelete",
        "links": [
            "bdb6a329.8574b"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "15ae2641.f1cc7a",
        "type": "link out",
        "z": "19ad2b6f.f11b85",
        "name": "refreshAfterUpload",
        "links": [
            "bdb6a329.8574b"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "faf9ee8.6642a1",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "964d2a30.34e938"
            ]
        ]
    },
    {
        "id": "f0813c91.8c7838",
        "type": "delay",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "ea605dad.7b36a8"
            ]
        ]
    },
    {
        "id": "a5f544d.69b9bb8",
        "type": "watch",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "f0813c91.8c7838"
            ]
        ]
    },
    {
        "id": "b42b38bf.d5a548",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "a425ba62.ff1df"
            ]
        ]
    },
    {
        "id": "63e6ebc1.1cc124",
        "type": "switch",
        "z": "19ad2b6f.f11b85",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "10c1284a.0e3f98"
            ],
            [
                "e34d7e40.c64b5"
            ]
        ]
    },
    {
        "id": "e34d7e40.c64b5",
        "type": "function",
        "z": "19ad2b6f.f11b85",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "noerr": 0,
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "144a9c8f.af7e9b",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "15ae2641.f1cc7a"
            ]
        ]
    },
    {
        "id": "fd866162d859cd0b",
        "type": "http in",
        "z": "43cf8e1501d17432",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "cb67aa51f2edd6e0",
                "602e70d8b2425032",
                "86e2229352b7adcf"
            ]
        ]
    },
    {
        "id": "783df379ee82c76e",
        "type": "http response",
        "z": "43cf8e1501d17432",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "c6362083b3160bcf",
        "type": "link in",
        "z": "43cf8e1501d17432",
        "name": "refreshFileDropdown",
        "links": [
            "4995d71815057f99",
            "78826edb5c695986"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "90bec91c25395e02"
            ]
        ]
    },
    {
        "id": "0d541262f5cb1b8f",
        "type": "change",
        "z": "43cf8e1501d17432",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "cb67aa51f2edd6e0",
        "type": "change",
        "z": "43cf8e1501d17432",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "58964a902a8031b6",
                "86e2229352b7adcf"
            ]
        ]
    },
    {
        "id": "65d1f2672899feb0",
        "type": "file",
        "z": "43cf8e1501d17432",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "722015c459f5f55b",
                "86e2229352b7adcf"
            ]
        ]
    },
    {
        "id": "594bfb277f1a5cce",
        "type": "inject",
        "z": "43cf8e1501d17432",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "90bec91c25395e02"
            ]
        ]
    },
    {
        "id": "2c6c4ce058fcc439",
        "type": "change",
        "z": "43cf8e1501d17432",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "615cd005c9586a89"
            ]
        ]
    },
    {
        "id": "27c2d691318c8efc",
        "type": "file",
        "z": "43cf8e1501d17432",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "78826edb5c695986"
            ]
        ]
    },
    {
        "id": "c1c6a922160cc756",
        "type": "switch",
        "z": "43cf8e1501d17432",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "27c2d691318c8efc"
            ]
        ]
    },
    {
        "id": "46bf02fbce54d48d",
        "type": "catch",
        "z": "43cf8e1501d17432",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "d85ee564390ae5c3"
            ]
        ]
    },
    {
        "id": "d85ee564390ae5c3",
        "type": "change",
        "z": "43cf8e1501d17432",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "4f5c8eacaa84d8e6",
                "86e2229352b7adcf"
            ]
        ]
    },
    {
        "id": "78826edb5c695986",
        "type": "link out",
        "z": "43cf8e1501d17432",
        "name": "refreshAfterDelete",
        "links": [
            "c6362083b3160bcf"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "4995d71815057f99",
        "type": "link out",
        "z": "43cf8e1501d17432",
        "name": "refreshAfterUpload",
        "links": [
            "c6362083b3160bcf"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "602e70d8b2425032",
        "type": "change",
        "z": "43cf8e1501d17432",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "783df379ee82c76e",
                "86e2229352b7adcf"
            ]
        ]
    },
    {
        "id": "90bec91c25395e02",
        "type": "delay",
        "z": "43cf8e1501d17432",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d2754fd098193891",
        "type": "watch",
        "z": "43cf8e1501d17432",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "90bec91c25395e02"
            ]
        ]
    },
    {
        "id": "2d30d20509ded6f6",
        "type": "change",
        "z": "43cf8e1501d17432",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "3753ee642c894aa3"
            ]
        ]
    },
    {
        "id": "58964a902a8031b6",
        "type": "switch",
        "z": "43cf8e1501d17432",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "65d1f2672899feb0",
                "86e2229352b7adcf"
            ],
            [
                "94c3eef8127264eb",
                "86e2229352b7adcf"
            ]
        ]
    },
    {
        "id": "94c3eef8127264eb",
        "type": "function",
        "z": "43cf8e1501d17432",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "722015c459f5f55b",
        "type": "change",
        "z": "43cf8e1501d17432",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "4995d71815057f99"
            ]
        ]
    },
    {
        "id": "57d2712d44614b1a",
        "type": "watch",
        "z": "43cf8e1501d17432",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "86e2229352b7adcf",
        "type": "debug",
        "z": "43cf8e1501d17432",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "be5090d09a432cd7",
        "type": "http in",
        "z": "43cf8e1501d17432",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "a2a018b0bd610477",
        "type": "ui_button",
        "z": "43cf8e1501d17432",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "2c6c4ce058fcc439"
            ]
        ]
    },
    {
        "id": "3753ee642c894aa3",
        "type": "ui_dropdown",
        "z": "43cf8e1501d17432",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "0d541262f5cb1b8f"
            ]
        ]
    },
    {
        "id": "615cd005c9586a89",
        "type": "ui_toast",
        "z": "43cf8e1501d17432",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "c1c6a922160cc756"
            ]
        ]
    },
    {
        "id": "4f5c8eacaa84d8e6",
        "type": "ui_toast",
        "z": "43cf8e1501d17432",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "998eaad752d3bc94",
        "type": "ui_template",
        "z": "43cf8e1501d17432",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "86e2229352b7adcf"
            ]
        ]
    },
    {
        "id": "a1f4e9bb5b48379f",
        "type": "http in",
        "z": "09e75dca4c9b5986",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "268b3f2690a38ef3",
                "724677f7baaadab6",
                "3bc275ebd375390b"
            ]
        ]
    },
    {
        "id": "afc6db86683b4e3b",
        "type": "http response",
        "z": "09e75dca4c9b5986",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "59d865bc2973d107",
        "type": "link in",
        "z": "09e75dca4c9b5986",
        "name": "refreshFileDropdown",
        "links": [
            "6cffc8e6a193e4ac",
            "2d1809aa412e5ab0"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "f8e851f2f7657a75"
            ]
        ]
    },
    {
        "id": "ad5e9061bbdf0984",
        "type": "change",
        "z": "09e75dca4c9b5986",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "268b3f2690a38ef3",
        "type": "change",
        "z": "09e75dca4c9b5986",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "11d54f3444c2b66b",
                "3bc275ebd375390b"
            ]
        ]
    },
    {
        "id": "dcd20ebe6fd74e7e",
        "type": "file",
        "z": "09e75dca4c9b5986",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "6fe62391a11cb8e3",
                "3bc275ebd375390b"
            ]
        ]
    },
    {
        "id": "9dd0c8a54a29723f",
        "type": "inject",
        "z": "09e75dca4c9b5986",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "f8e851f2f7657a75"
            ]
        ]
    },
    {
        "id": "baa5f4e3462f6385",
        "type": "change",
        "z": "09e75dca4c9b5986",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "550a3f77d5ef0532"
            ]
        ]
    },
    {
        "id": "b48f23b52364791a",
        "type": "file",
        "z": "09e75dca4c9b5986",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "2d1809aa412e5ab0"
            ]
        ]
    },
    {
        "id": "b25bf8e0ffe6d99d",
        "type": "switch",
        "z": "09e75dca4c9b5986",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "b48f23b52364791a"
            ]
        ]
    },
    {
        "id": "94f698bfadaff59f",
        "type": "catch",
        "z": "09e75dca4c9b5986",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "4477b1c4c934ae64"
            ]
        ]
    },
    {
        "id": "4477b1c4c934ae64",
        "type": "change",
        "z": "09e75dca4c9b5986",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "8384f276e0428a00",
                "3bc275ebd375390b"
            ]
        ]
    },
    {
        "id": "2d1809aa412e5ab0",
        "type": "link out",
        "z": "09e75dca4c9b5986",
        "name": "refreshAfterDelete",
        "links": [
            "59d865bc2973d107"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "6cffc8e6a193e4ac",
        "type": "link out",
        "z": "09e75dca4c9b5986",
        "name": "refreshAfterUpload",
        "links": [
            "59d865bc2973d107"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "724677f7baaadab6",
        "type": "change",
        "z": "09e75dca4c9b5986",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "afc6db86683b4e3b",
                "3bc275ebd375390b"
            ]
        ]
    },
    {
        "id": "f8e851f2f7657a75",
        "type": "delay",
        "z": "09e75dca4c9b5986",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0eb95c0ceb359a5f",
        "type": "watch",
        "z": "09e75dca4c9b5986",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "f8e851f2f7657a75"
            ]
        ]
    },
    {
        "id": "6802075ac0050a7b",
        "type": "change",
        "z": "09e75dca4c9b5986",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "7b4ce7b0c0e8b4fc"
            ]
        ]
    },
    {
        "id": "11d54f3444c2b66b",
        "type": "switch",
        "z": "09e75dca4c9b5986",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "dcd20ebe6fd74e7e",
                "3bc275ebd375390b"
            ],
            [
                "526c97963b559dda",
                "3bc275ebd375390b"
            ]
        ]
    },
    {
        "id": "526c97963b559dda",
        "type": "function",
        "z": "09e75dca4c9b5986",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "6fe62391a11cb8e3",
        "type": "change",
        "z": "09e75dca4c9b5986",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "6cffc8e6a193e4ac"
            ]
        ]
    },
    {
        "id": "5727f96a1689d75d",
        "type": "watch",
        "z": "09e75dca4c9b5986",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3bc275ebd375390b",
        "type": "debug",
        "z": "09e75dca4c9b5986",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "636364c82a6a2f66",
        "type": "http in",
        "z": "09e75dca4c9b5986",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "41649e19e066d5bf",
        "type": "ui_button",
        "z": "09e75dca4c9b5986",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "baa5f4e3462f6385"
            ]
        ]
    },
    {
        "id": "7b4ce7b0c0e8b4fc",
        "type": "ui_dropdown",
        "z": "09e75dca4c9b5986",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "ad5e9061bbdf0984"
            ]
        ]
    },
    {
        "id": "550a3f77d5ef0532",
        "type": "ui_toast",
        "z": "09e75dca4c9b5986",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "b25bf8e0ffe6d99d"
            ]
        ]
    },
    {
        "id": "8384f276e0428a00",
        "type": "ui_toast",
        "z": "09e75dca4c9b5986",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "7a62e7c68758cbea",
        "type": "ui_template",
        "z": "09e75dca4c9b5986",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "3bc275ebd375390b"
            ]
        ]
    },
    {
        "id": "dde5ef8679808e09",
        "type": "http in",
        "z": "97de5fa403c72243",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "5d1ae416141e1908",
                "02a5d8690887db33",
                "3606246b60ddfaa2"
            ]
        ]
    },
    {
        "id": "00de39ac8798e85f",
        "type": "http response",
        "z": "97de5fa403c72243",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "6ed2b08869f8f873",
        "type": "link in",
        "z": "97de5fa403c72243",
        "name": "refreshFileDropdown",
        "links": [
            "c92eb14470f81fdb",
            "69012f713580e357"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "2e567bf502fd2134"
            ]
        ]
    },
    {
        "id": "c652eb621be77ec4",
        "type": "change",
        "z": "97de5fa403c72243",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5d1ae416141e1908",
        "type": "change",
        "z": "97de5fa403c72243",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "431fe37065e64b6d",
                "3606246b60ddfaa2"
            ]
        ]
    },
    {
        "id": "74a852436f56f5f2",
        "type": "file",
        "z": "97de5fa403c72243",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "60352fcd2705bb82",
                "3606246b60ddfaa2"
            ]
        ]
    },
    {
        "id": "8aa561f15e4d3a37",
        "type": "inject",
        "z": "97de5fa403c72243",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "2e567bf502fd2134"
            ]
        ]
    },
    {
        "id": "6127e9b449a64761",
        "type": "change",
        "z": "97de5fa403c72243",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "7c10d5fbc5fd2bc9"
            ]
        ]
    },
    {
        "id": "e0278cadfb4a60b1",
        "type": "file",
        "z": "97de5fa403c72243",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "69012f713580e357"
            ]
        ]
    },
    {
        "id": "96b2c4358d84e394",
        "type": "switch",
        "z": "97de5fa403c72243",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "e0278cadfb4a60b1"
            ]
        ]
    },
    {
        "id": "f919230a1494c166",
        "type": "catch",
        "z": "97de5fa403c72243",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "3696c9e9c101cdab"
            ]
        ]
    },
    {
        "id": "3696c9e9c101cdab",
        "type": "change",
        "z": "97de5fa403c72243",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "d7ff4649b49faaf0",
                "3606246b60ddfaa2"
            ]
        ]
    },
    {
        "id": "69012f713580e357",
        "type": "link out",
        "z": "97de5fa403c72243",
        "name": "refreshAfterDelete",
        "links": [
            "6ed2b08869f8f873"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "c92eb14470f81fdb",
        "type": "link out",
        "z": "97de5fa403c72243",
        "name": "refreshAfterUpload",
        "links": [
            "6ed2b08869f8f873"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "02a5d8690887db33",
        "type": "change",
        "z": "97de5fa403c72243",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "00de39ac8798e85f",
                "3606246b60ddfaa2"
            ]
        ]
    },
    {
        "id": "2e567bf502fd2134",
        "type": "delay",
        "z": "97de5fa403c72243",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4bb39cce722b0923",
        "type": "watch",
        "z": "97de5fa403c72243",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "2e567bf502fd2134"
            ]
        ]
    },
    {
        "id": "388aa5a1252ad4b4",
        "type": "change",
        "z": "97de5fa403c72243",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "4406900f6123084c"
            ]
        ]
    },
    {
        "id": "431fe37065e64b6d",
        "type": "switch",
        "z": "97de5fa403c72243",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "74a852436f56f5f2",
                "3606246b60ddfaa2"
            ],
            [
                "c24459c18c8945f4",
                "3606246b60ddfaa2"
            ]
        ]
    },
    {
        "id": "c24459c18c8945f4",
        "type": "function",
        "z": "97de5fa403c72243",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "60352fcd2705bb82",
        "type": "change",
        "z": "97de5fa403c72243",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "c92eb14470f81fdb"
            ]
        ]
    },
    {
        "id": "3591803c1d763e28",
        "type": "watch",
        "z": "97de5fa403c72243",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3606246b60ddfaa2",
        "type": "debug",
        "z": "97de5fa403c72243",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "8d908a980a13bae7",
        "type": "http in",
        "z": "97de5fa403c72243",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "4406900f6123084c",
        "type": "ui_dropdown",
        "z": "97de5fa403c72243",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "c652eb621be77ec4"
            ]
        ]
    },
    {
        "id": "e6eb880adaa5e84b",
        "type": "ui_button",
        "z": "97de5fa403c72243",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "6127e9b449a64761"
            ]
        ]
    },
    {
        "id": "7c10d5fbc5fd2bc9",
        "type": "ui_toast",
        "z": "97de5fa403c72243",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "96b2c4358d84e394"
            ]
        ]
    },
    {
        "id": "d7ff4649b49faaf0",
        "type": "ui_toast",
        "z": "97de5fa403c72243",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "5b1b633e7e51201c",
        "type": "ui_template",
        "z": "97de5fa403c72243",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "3606246b60ddfaa2"
            ]
        ]
    },
    {
        "id": "f513a005e9725d5e",
        "type": "http in",
        "z": "5e0187cf50a5b026",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "426f38faa283db87",
                "d1b7b234b9c55833",
                "a61be5436dfce3ab"
            ]
        ]
    },
    {
        "id": "745ad3249f87328b",
        "type": "http response",
        "z": "5e0187cf50a5b026",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "b2d280f867ac3fe1",
        "type": "link in",
        "z": "5e0187cf50a5b026",
        "name": "refreshFileDropdown",
        "links": [
            "fbd985c4e6d9985b",
            "1cec4a41ad22ba3f"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "03a8fd9d997371ee"
            ]
        ]
    },
    {
        "id": "b9d956df4d7589ee",
        "type": "change",
        "z": "5e0187cf50a5b026",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "426f38faa283db87",
        "type": "change",
        "z": "5e0187cf50a5b026",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "f78538050c2495d9",
                "a61be5436dfce3ab"
            ]
        ]
    },
    {
        "id": "7560c4f58920389f",
        "type": "file",
        "z": "5e0187cf50a5b026",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "57afcc6c20c95675",
                "a61be5436dfce3ab"
            ]
        ]
    },
    {
        "id": "1a0e8f9acee405bb",
        "type": "inject",
        "z": "5e0187cf50a5b026",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "03a8fd9d997371ee"
            ]
        ]
    },
    {
        "id": "c83ff390b8cf99f2",
        "type": "change",
        "z": "5e0187cf50a5b026",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "1b7e92a8d188416c"
            ]
        ]
    },
    {
        "id": "a772f09e2337fa16",
        "type": "file",
        "z": "5e0187cf50a5b026",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "1cec4a41ad22ba3f"
            ]
        ]
    },
    {
        "id": "565ae84f15bf6bb0",
        "type": "switch",
        "z": "5e0187cf50a5b026",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "a772f09e2337fa16"
            ]
        ]
    },
    {
        "id": "f771bcb2e86c103f",
        "type": "catch",
        "z": "5e0187cf50a5b026",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "07a8042902b649f2"
            ]
        ]
    },
    {
        "id": "07a8042902b649f2",
        "type": "change",
        "z": "5e0187cf50a5b026",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "e2ccd366f5147302",
                "a61be5436dfce3ab"
            ]
        ]
    },
    {
        "id": "1cec4a41ad22ba3f",
        "type": "link out",
        "z": "5e0187cf50a5b026",
        "name": "refreshAfterDelete",
        "links": [
            "b2d280f867ac3fe1"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "fbd985c4e6d9985b",
        "type": "link out",
        "z": "5e0187cf50a5b026",
        "name": "refreshAfterUpload",
        "links": [
            "b2d280f867ac3fe1"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "d1b7b234b9c55833",
        "type": "change",
        "z": "5e0187cf50a5b026",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "745ad3249f87328b",
                "a61be5436dfce3ab"
            ]
        ]
    },
    {
        "id": "03a8fd9d997371ee",
        "type": "delay",
        "z": "5e0187cf50a5b026",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b26472a574b2aa72",
        "type": "watch",
        "z": "5e0187cf50a5b026",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "03a8fd9d997371ee"
            ]
        ]
    },
    {
        "id": "a7477a3bfd5f63a0",
        "type": "change",
        "z": "5e0187cf50a5b026",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "2f251a6e0730cd65"
            ]
        ]
    },
    {
        "id": "f78538050c2495d9",
        "type": "switch",
        "z": "5e0187cf50a5b026",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "7560c4f58920389f",
                "a61be5436dfce3ab"
            ],
            [
                "57bed82a57a116e3",
                "a61be5436dfce3ab"
            ]
        ]
    },
    {
        "id": "57bed82a57a116e3",
        "type": "function",
        "z": "5e0187cf50a5b026",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "57afcc6c20c95675",
        "type": "change",
        "z": "5e0187cf50a5b026",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "fbd985c4e6d9985b"
            ]
        ]
    },
    {
        "id": "97ba1c88e274389c",
        "type": "watch",
        "z": "5e0187cf50a5b026",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a61be5436dfce3ab",
        "type": "debug",
        "z": "5e0187cf50a5b026",
        "name": "debug 367",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 660,
        "wires": []
    },
    {
        "id": "7744843ad8100d4e",
        "type": "http in",
        "z": "5e0187cf50a5b026",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2f251a6e0730cd65",
        "type": "ui_dropdown",
        "z": "5e0187cf50a5b026",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "6f30b1b001a9b330",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "b9d956df4d7589ee"
            ]
        ]
    },
    {
        "id": "240cbecff7653029",
        "type": "ui_button",
        "z": "5e0187cf50a5b026",
        "name": "",
        "group": "6f30b1b001a9b330",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "c83ff390b8cf99f2"
            ]
        ]
    },
    {
        "id": "1b7e92a8d188416c",
        "type": "ui_toast",
        "z": "5e0187cf50a5b026",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "565ae84f15bf6bb0"
            ]
        ]
    },
    {
        "id": "e2ccd366f5147302",
        "type": "ui_toast",
        "z": "5e0187cf50a5b026",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "8bf4c438889ca578",
        "type": "ui_template",
        "z": "5e0187cf50a5b026",
        "group": "6f30b1b001a9b330",
        "name": "Upload",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "a61be5436dfce3ab"
            ]
        ]
    },
    {
        "id": "116bc073eebbcd58",
        "type": "http in",
        "z": "9219543f935faca2",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "a3a0356257f43d58",
                "b11e9c5dd627291b"
            ]
        ]
    },
    {
        "id": "bf443b454c31f6f2",
        "type": "http response",
        "z": "9219543f935faca2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "eb676c9d1111c57c",
        "type": "ui_template",
        "z": "9219543f935faca2",
        "group": "4178bf61.05d97",
        "name": "Upload",
        "order": 1,
        "width": "6",
        "height": "3",
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 120,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "7fd36f08ef7c7b9e",
        "type": "subflow:4f6b87ae.7d3bb",
        "z": "9219543f935faca2",
        "name": "",
        "env": [
            {
                "name": "DIRECTORY",
                "type": "env",
                "value": "UPLOAD_DIR"
            },
            {
                "name": "EXTENSIONS",
                "type": "env",
                "value": "EXTENSIONS"
            }
        ],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "bc4b8876eb0e6b6e"
            ]
        ]
    },
    {
        "id": "b9c31ef22fbd39e2",
        "type": "ui_dropdown",
        "z": "9219543f935faca2",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "4178bf61.05d97",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 750,
        "y": 140,
        "wires": [
            [
                "bd3f81aa4f3adbaf"
            ]
        ]
    },
    {
        "id": "2aab0748f17afb21",
        "type": "link in",
        "z": "9219543f935faca2",
        "name": "refreshFileDropdown",
        "links": [
            "18250047ce912449",
            "965e95ab660c281a"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "d16d9d61199da9dd"
            ]
        ]
    },
    {
        "id": "1d3d674a11fa3a2c",
        "type": "ui_button",
        "z": "9219543f935faca2",
        "name": "",
        "group": "4178bf61.05d97",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Delete",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "371e73f7b5756b1e"
            ]
        ]
    },
    {
        "id": "bd3f81aa4f3adbaf",
        "type": "change",
        "z": "9219543f935faca2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a3a0356257f43d58",
        "type": "change",
        "z": "9219543f935faca2",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "6dcb937467dc5c58"
            ]
        ]
    },
    {
        "id": "c37f02a88fdbf51f",
        "type": "file",
        "z": "9219543f935faca2",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "04af89a71a442e97"
            ]
        ]
    },
    {
        "id": "c446d1ebcca983d7",
        "type": "inject",
        "z": "9219543f935faca2",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "d16d9d61199da9dd"
            ]
        ]
    },
    {
        "id": "371e73f7b5756b1e",
        "type": "change",
        "z": "9219543f935faca2",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "9fcf0636ec999326"
            ]
        ]
    },
    {
        "id": "2c3e026f887814eb",
        "type": "file",
        "z": "9219543f935faca2",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "965e95ab660c281a"
            ]
        ]
    },
    {
        "id": "9fcf0636ec999326",
        "type": "ui_toast",
        "z": "9219543f935faca2",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "b9c0fedab39c3b7f"
            ]
        ]
    },
    {
        "id": "b9c0fedab39c3b7f",
        "type": "switch",
        "z": "9219543f935faca2",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "2c3e026f887814eb"
            ]
        ]
    },
    {
        "id": "b1ae34f467c5c2a8",
        "type": "catch",
        "z": "9219543f935faca2",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "f2da206290382bee"
            ]
        ]
    },
    {
        "id": "2a2fcdd5760ad2ee",
        "type": "ui_toast",
        "z": "9219543f935faca2",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "f2da206290382bee",
        "type": "change",
        "z": "9219543f935faca2",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "2a2fcdd5760ad2ee"
            ]
        ]
    },
    {
        "id": "965e95ab660c281a",
        "type": "link out",
        "z": "9219543f935faca2",
        "name": "refreshAfterDelete",
        "links": [
            "2aab0748f17afb21"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "18250047ce912449",
        "type": "link out",
        "z": "9219543f935faca2",
        "name": "refreshAfterUpload",
        "links": [
            "2aab0748f17afb21"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "b11e9c5dd627291b",
        "type": "change",
        "z": "9219543f935faca2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "bf443b454c31f6f2"
            ]
        ]
    },
    {
        "id": "d16d9d61199da9dd",
        "type": "delay",
        "z": "9219543f935faca2",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "7fd36f08ef7c7b9e"
            ]
        ]
    },
    {
        "id": "799528fdad7836c7",
        "type": "watch",
        "z": "9219543f935faca2",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "d16d9d61199da9dd"
            ]
        ]
    },
    {
        "id": "bc4b8876eb0e6b6e",
        "type": "change",
        "z": "9219543f935faca2",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            [
                "b9c31ef22fbd39e2"
            ]
        ]
    },
    {
        "id": "6dcb937467dc5c58",
        "type": "switch",
        "z": "9219543f935faca2",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "c37f02a88fdbf51f"
            ],
            [
                "29fe2e27fc0274b8"
            ]
        ]
    },
    {
        "id": "29fe2e27fc0274b8",
        "type": "function",
        "z": "9219543f935faca2",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "noerr": 0,
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "04af89a71a442e97",
        "type": "change",
        "z": "9219543f935faca2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "18250047ce912449"
            ]
        ]
    },
    {
        "id": "c40feb7825e478d4",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Monitored Directory /cases/processor",
        "info": "",
        "x": 170,
        "y": 260,
        "wires": []
    },
    {
        "id": "1dc2e40229cf819f",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Double click on Queue Zips to the adjust bulk processing value",
        "info": "Tweak the value to configure how many archives to process at any given time",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "e0658d835205bc43",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "1a3f028824bd9f13",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Decompression Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 420,
        "wires": [
            [
                "562bd891136c7a22",
                "1ce9ab81db8fa381",
                "e8c9dac0b45ce024",
                "f2696de8258ca840"
            ],
            [
                "a8c0e026d01fe67f",
                "d3ad201a6345ec44"
            ]
        ]
    },
    {
        "id": "a8c0e026d01fe67f",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Decompress Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 440,
        "wires": []
    },
    {
        "id": "b50268e02b2de0d7",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "READ ME FIRST! Double Click",
        "info": "**CURRENT CONFIG OF THE AUTOMATION DO NOT PROCESS NESTED ZIPS OF HOSTS.FOR EXAMPLE, YOU CANNOT UPLOAD A SINGLE ZIP CONTAINING TRIAGE ARCHIVES OF N DIFFERENT HOSTS.**\n\n**Following folders need to be created beforehand**\n/cases/processor - this is where archives will need to be copied to. Note that the original archives copied here will be retained indefinitely.\n/cases/plaso - this is where plaso files be stored after log2timeline completes its processing.\n/cases/evtxproc/ -processed hayabusa csvs will be stored here.\n\n**Hayabusa Evtx Processing***\nThis is currently configured for KAPE triage configurations, where the evtx is expected like below\nunzipped directory/C/Windows/System32/winevt/. You can change the path by updating the path in Hayabusa Process Variables node. You must change the timesketch username and password information in the same node. Otherwise it will fail to ingest to Timesketch\n\n***Slack notifications***\nYou must set the slack webhook and username configuration within the \"Notification to Slack\" node within \"Slack Notifications\" flow \n\nMake sure Node-RED can read and write to all folders under /cases.\n\n**Compression utility must be pre-installed on the Linux host prior running the workflow**\nThis automation is configured to detect Zip, RAR, Tar GZ & BZ2, 7z archives.\n\n** \"Variable Setup\" node** \nThis node contains the key commandline parameters used for archive tools and other variables required for automation.\n\n**You need the following Node-RED nodes installed via the Node-RED palette**\n\n-node-red-contrib-fs \n-node-red-contrib-fs-ops \n-node-red-contrib-simple-queue \n-node-red-contrib-watchdirectory\n-node-red-contrib-slack-files\n\n**Change the Log2Timeline CLI Parameters and Timesketch CLI Parameters**\nYou should review the CLI parameters used for Log2timeline and Timesketch in their respective nodes. \n\n\n**FYI Only**\nNode-RED has a default memory cap of 2GB. You can increase this through the use of environment variables. Add the following to your bash.rc of the user in which Node-RED runs. Size is in MB.\n\nNODE_OPTIONS=--max_old_space_size=4096",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "b6ecf5f15136a82b",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Archive Detection",
        "mode": "link",
        "links": [
            "bb4beaa62a0d33db"
        ],
        "x": 805,
        "y": 360,
        "wires": []
    },
    {
        "id": "65e9ad454afcf6d1",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "Post Integrity Check In",
        "links": [
            "3a6757a824d0b781"
        ],
        "x": 895,
        "y": 360,
        "wires": [
            [
                "0abb6da646da8e2a"
            ]
        ]
    },
    {
        "id": "3b18ad5734fc996b",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Prepare Archive Decompression API Call",
        "func": "// This Function node prepares an API call to TITAN_Processor to decompress an archive.\n// It assumes msg.filename is the full path to the uploaded archive, and msg.filedir is its directory.\n\nnode.log(\"Node-RED: Preparing API call for /decompress_archive.\");\n\nif (!msg.filename || typeof msg.filename !== 'string' || !msg.filedir || typeof msg.filedir !== 'string') {\n    // Corrected: Only pass the string message to node.error\n    node.error(\"msg.filename or msg.filedir is missing or invalid for archive processing.\");\n    return null; // Stop the flow\n}\n\nvar archiveFullPath = msg.filename;\nvar archiveFileDirectory = msg.filedir;\n\nvar archiveBasenameWithExt = archiveFullPath.split('/').pop();\nvar archiveBasenameNoExt = \"\";\nvar archiveExtension = \"\";\n\nvar parts = archiveBasenameWithExt.split('.');\nif (parts.length > 1) {\n    archiveExtension = parts.pop().toLowerCase();\n    // Handle complex extensions like .tar.gz\n    if ((parts.length > 1) && (parts[parts.length - 1].toLowerCase() === \"tar\")) {\n        archiveExtension = \"tar.\" + archiveExtension;\n        parts.pop();\n    }\n    archiveBasenameNoExt = parts.join('.').toLowerCase();\n} else {\n    archiveBasenameNoExt = parts.length > 0 ? parts[0].toLowerCase() : \"unknown_archive\";\n    // Corrected: Only pass the string message to node.warn\n    node.warn(\"Archive file may have no extension: \" + archiveFullPath);\n}\n\nif (!archiveExtension) {\n    // Corrected: Only pass the string message to node.error\n    node.error(\"Could not determine archive type for: \" + archiveFullPath);\n    return null; // Stop flow\n}\n\nvar timestamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\nvar uniqueOutputDirectoryName = archiveBasenameNoExt + \"_\" + timestamp + \"_extracted\";\n\n// Use safe string concatenation to build the full path\nvar outputDirectoryFullPath = \"\";\nif (archiveFileDirectory.endsWith('/')) {\n    outputDirectoryFullPath = archiveFileDirectory + uniqueOutputDirectoryName;\n} else {\n    outputDirectoryFullPath = archiveFileDirectory + '/' + uniqueOutputDirectoryName;\n}\n\n\n// Store paths and names for subsequent nodes (these are attached to the msg object)\nmsg.archive_type_detected = archiveExtension;\nmsg.extraction_path = outputDirectoryFullPath; // Path where files will be unzipped\nmsg.job_base_name = archiveBasenameNoExt + \"_\" + timestamp; // For naming downstream jobs\n\n// Prepare the JSON payload for the /decompress_archive API endpoint\nmsg.payload = {\n    archive_file_path: archiveFullPath,\n    output_directory_path: outputDirectoryFullPath,\n    archive_type: archiveExtension\n};\n\n// Set up the properties for the 'http request' node that will follow this Function node\nmsg.url = \"http://titan_processor:5005/decompress_archive\";\nmsg.method = \"POST\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\n\n// Corrected: Only pass the string message to node.warn\nnode.warn(\"Node-RED: API Payload for /decompress_archive: \" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "b6ecf5f15136a82b",
                "de949eecbb53d66e",
                "5beb4c8cbfb504ea"
            ]
        ]
    },
    {
        "id": "f1ea48448bbde595",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "ToDecompress",
        "mode": "link",
        "links": [
            "5fd92537b38314b0"
        ],
        "x": 1475,
        "y": 360,
        "wires": []
    },
    {
        "id": "a9c3989928f3fee0",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "Decompress Status In",
        "links": [
            "e8aed768bff52623"
        ],
        "x": 95,
        "y": 420,
        "wires": [
            [
                "1a3f028824bd9f13"
            ]
        ]
    },
    {
        "id": "d3ad201a6345ec44",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Decompression Failure",
        "mode": "link",
        "links": [
            "b43ee8044209a3aa"
        ],
        "x": 455,
        "y": 480,
        "wires": []
    },
    {
        "id": "562bd891136c7a22",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Decompression Success",
        "mode": "link",
        "links": [
            "edcac73c6d2f1fd4"
        ],
        "x": 465,
        "y": 400,
        "wires": []
    },
    {
        "id": "62e7086b962f93fe",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Queue Release",
        "mode": "link",
        "links": [
            "75769f870091de80"
        ],
        "x": 1335,
        "y": 40,
        "wires": []
    },
    {
        "id": "e4e7063f519ed216",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Prepare Hayabusa API Call",
        "func": "// Node-RED Function node: \"Prepare Hayabusa API Call\"\n// Assumes msg.dirname contains the path to the root of the mounted/extracted image's C: drive \n// (e.g., /cases/processor/myimage_extracted/C or /cases/mounted/myimage_partitions/p1 if p1 is C:)\n// Assumes msg.job_base_name (e.g., \"myimage_timestamp\") is available from an earlier step for consistent job/file naming.\n// If msg.job_base_name is not available, it will try to derive one from msg.filename.\n\nnode.warn(\"Node-RED: Preparing API call for /run_hayabusa\");\n\n// 1. Determine the EVTX directory path\nvar evtxDirectory = \"\";\nif (msg.dirname && typeof msg.dirname === 'string') {\n    // Path to Windows Event Logs relative to the root of the C: drive partition\n    // Ensure msg.dirname correctly points to the root of the mounted C: drive partition.\n    evtxDirectory = msg.dirname + (msg.dirname.endsWith('/') ? '' : '/') + 'Windows/System32/winevt/Logs/';\n    node.log(\"Using EVTX directory: \" + evtxDirectory);\n} else {\n    node.error(\"msg.dirname (path to mounted image root/C: drive) is missing or invalid for Hayabusa EVTX path.\", msg);\n    return null; // Stop the flow\n}\n\n// 2. Determine a base name for this Hayabusa job and its output file\nvar hayabusaJobNameBase = \"\";\nif (msg.job_base_name && typeof msg.job_base_name === 'string') {\n    hayabusaJobNameBase = msg.job_base_name;\n} else if (msg.plasofname && typeof msg.plasofname === 'string') { \n    // Use msg.plasofname if it's a clean base name\n    hayabusaJobNameBase = msg.plasofname.includes('/') ? msg.plasofname.split(\"/\").pop() : msg.plasofname;\n} else if (msg.filename && typeof msg.filename === 'string') {\n    // Fallback to original E01 filename\n    try {\n        hayabusaJobNameBase = msg.filename.split(\"/\").pop().split(\".\")[0].toLowerCase();\n    } catch (e) {\n        node.warn(\"Error deriving basename from msg.filename for Hayabusa: \" + e.message);\n        var ts = new Date().toISOString().substring(0,10).replace(/-/g,\"\");\n        hayabusaJobNameBase = \"hayabusa_generic_\" + ts;\n    }\n} else {\n    var ts = new Date().toISOString().substring(0,10).replace(/-/g,\"\");\n    hayabusaJobNameBase = \"hayabusa_generic_\" + ts;\n    // Corrected the warning to not pass the full 'msg' object as the second argument directly\n    // if it's causing issues. If you need to see the full msg, use a separate debug node.\n    node.warn(\"Could not determine Hayabusa job base name from msg.job_base_name, msg.plasofname, or msg.filename. Using generic: \" + hayabusaJobNameBase);\n}\n\nvar fullHayabusaJobName = hayabusaJobNameBase + \"-hayabusa\";\n\n// 3. Define the output CSV path for Hayabusa\n// This path is where TITAN_Processor will instruct Hayabusa to save the CSV.\nvar outputCsvPath = '/cases/evtxproc/' + fullHayabusaJobName + '.csv';\n\n// 4. Store information needed for the *next* step (Timesketch import of this CSV)\n// These will be passed along on the msg object, NOT in the payload for the /run_hayabusa call.\nmsg.hayabusa_output_csv_for_timesketch = outputCsvPath;\nmsg.hayabusa_timeline_name_for_timesketch = fullHayabusaJobName; // Or customize further if needed\nmsg.timesketch_sketch_id_for_hayabusa = \"1\"; // VERIFY this is the correct Sketch ID\n\n// 5. Prepare the JSON payload for the /run_hayabusa API endpoint\nmsg.payload = {\n    evtx_dir_path: evtxDirectory,\n    output_csv_path: outputCsvPath\n    // Optional: If your /run_hayabusa API endpoint in processor.py supports an 'options_str'\n    // for Hayabusa, you can add it here:\n    // \"hayabusa_options_str\": \"--profile security -L critical\" \n};\n\n// 6. Set up properties for the 'http request' node\nmsg.url = \"http://titan_processor:5005/run_hayabusa\";\nmsg.method = \"POST\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\n\nnode.warn(\"Node-RED: API Payload for /run_hayabusa: \" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "52415c7bb8e16c3a",
                "430a7da8abd665c9",
                "b7de806260036814"
            ]
        ]
    },
    {
        "id": "52415c7bb8e16c3a",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Out to Hayabusa Process",
        "mode": "link",
        "links": [
            "2397e77a3c79fda3"
        ],
        "x": 605,
        "y": 540,
        "wires": []
    },
    {
        "id": "4899ea50dd83351a",
        "type": "link in",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa Process Failed",
        "links": [],
        "x": 675,
        "y": 600,
        "wires": [
            [
                "4c62df5220200fdf"
            ]
        ]
    },
    {
        "id": "4c62df5220200fdf",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 600,
        "wires": []
    },
    {
        "id": "bd1b4ee6503bc34d",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa Timesketch Ingestion Failure",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 680,
        "wires": []
    },
    {
        "id": "846701cdbfb12f64",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Hayabusa specific config here",
        "info": "",
        "x": 360,
        "y": 580,
        "wires": []
    },
    {
        "id": "519e07706b40afdf",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "E01 Process",
        "mode": "link",
        "links": [
            "84d7cd3a2988674f"
        ],
        "x": 1125,
        "y": 40,
        "wires": []
    },
    {
        "id": "e2ea7e6a94a18404",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Process ZIP",
        "func": "msg.payload = \"Processing ZIP file: \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 280,
        "wires": [
            [
                "3b18ad5734fc996b",
                "de949eecbb53d66e"
            ]
        ]
    },
    {
        "id": "5b48534e1cd703c5",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "File Type",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.E01",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.vhd",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": ".*\\.vhdx",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.vmdk",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 940,
        "y": 120,
        "wires": [
            [
                "519e07706b40afdf"
            ],
            [
                "e2ea7e6a94a18404"
            ],
            [
                "dccc0af765f16871"
            ],
            [
                "1f168e07a0d53239"
            ],
            [
                "5d88f249dc4c5a80"
            ]
        ]
    },
    {
        "id": "dccc0af765f16871",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "VHD Process",
        "mode": "link",
        "links": [
            "236dcee18367a244"
        ],
        "x": 1125,
        "y": 80,
        "wires": []
    },
    {
        "id": "5d88f249dc4c5a80",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "VMDK Process",
        "mode": "link",
        "links": [
            "abc43a287b554b44"
        ],
        "x": 1125,
        "y": 120,
        "wires": []
    },
    {
        "id": "1f168e07a0d53239",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "VHDX Process",
        "mode": "link",
        "links": [
            "1896b282f8d5a850"
        ],
        "x": 1125,
        "y": 160,
        "wires": []
    },
    {
        "id": "1ce9ab81db8fa381",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 90,
        "y": 640,
        "wires": [
            [
                "e4e7063f519ed216"
            ],
            [
                "1b8393b25e5274ec",
                "b803c3ca2b4158ec"
            ]
        ]
    },
    {
        "id": "1b8393b25e5274ec",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "VR Hayabusa Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.collection = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.collection+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\nmsg.hayabusa_ts = \"-u titan -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"7 \" + msg.hayabusa_out + '.csv';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 720,
        "wires": [
            [
                "52415c7bb8e16c3a",
                "ebfef9e11e2f2d06"
            ]
        ]
    },
    {
        "id": "b803c3ca2b4158ec",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Switch Hayabusa Variable ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 880,
        "wires": []
    },
    {
        "id": "430a7da8abd665c9",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "KAPE Hayabusa Processing",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 960,
        "wires": []
    },
    {
        "id": "ebfef9e11e2f2d06",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "VR Hayabusa Processing",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 920,
        "wires": []
    },
    {
        "id": "5dd02181a46ff20d",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "echo -n \"sha256 =  \" >> /cases/processor/hashes/hashes.txt && sha256sum",
        "addpay": "sha256",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA256 Process",
        "x": 730,
        "y": 40,
        "wires": [
            [],
            [],
            [
                "606dbc60653e659a"
            ]
        ]
    },
    {
        "id": "606dbc60653e659a",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "echo -n \"sha1 =  \" >> /cases/processor/hashes/hashes.txt && sha1sum",
        "addpay": "sha1",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA1 Process",
        "x": 740,
        "y": 100,
        "wires": [
            [],
            [],
            [
                "7dc74e0ea82a4d4e"
            ]
        ]
    },
    {
        "id": "7dc74e0ea82a4d4e",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "echo -n \"md5 = \" >> /cases/processor/hashes/hashes.txt && md5sum",
        "addpay": "md5",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "MD5 Process",
        "x": 740,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "5b48534e1cd703c5"
            ]
        ]
    },
    {
        "id": "179728be993d6d8f",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "d": true,
        "name": "SHA256 Extract Params",
        "func": "msg.sha256 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.md5 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.sha1 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 160,
        "wires": [
            [
                "5dd02181a46ff20d",
                "de949eecbb53d66e"
            ]
        ]
    },
    {
        "id": "de949eecbb53d66e",
        "type": "websocket out",
        "z": "f8d31b3f79add29b",
        "name": "",
        "server": "db2dfcbad2821111",
        "client": "",
        "x": 1570,
        "y": 100,
        "wires": []
    },
    {
        "id": "4f821c6d2c595ac8",
        "type": "fs-ops-mkdir",
        "z": "f8d31b3f79add29b",
        "name": "Create Unzip Dir",
        "path": "filedir",
        "pathType": "msg",
        "dirname": "dirname",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "777",
        "fullpath": "dirname",
        "fullpathType": "msg",
        "x": 1340,
        "y": 360,
        "wires": [
            [
                "f1ea48448bbde595",
                "de949eecbb53d66e"
            ]
        ]
    },
    {
        "id": "79cc0876ab434694",
        "type": "watch-directory",
        "z": "f8d31b3f79add29b",
        "folder": "/cases/processor/",
        "folderType": "str",
        "recursive": "0",
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "Watch for Triage Archives",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "179728be993d6d8f",
                "de949eecbb53d66e",
                "d85511cd72d84cd4"
            ]
        ]
    },
    {
        "id": "0abb6da646da8e2a",
        "type": "simple-queue",
        "z": "f8d31b3f79add29b",
        "name": "Queue Zips",
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "4f821c6d2c595ac8",
                "62e7086b962f93fe"
            ]
        ]
    },
    {
        "id": "8a7ad3746fdfc178",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Timesketch Ingestion Failure",
        "mode": "link",
        "links": [
            "e1b089d27626665d",
            "f23c65b6a5d402fa"
        ],
        "x": 1695,
        "y": 1040,
        "wires": []
    },
    {
        "id": "381d356754cbd5b7",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1520,
        "y": 980,
        "wires": [
            [
                "c2df1a428cd94263"
            ],
            [
                "8a7ad3746fdfc178",
                "97c8951a9e7c5bec"
            ]
        ]
    },
    {
        "id": "e8c9dac0b45ce024",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "d": true,
        "name": "Set-Log2timeline CLI params",
        "func": "var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.dirname.replace('processor', 'plaso');\nmsg.l2tcli = \"log2timeline.py --status_view none --storage-file\" + \" \" + plasoname + \".plaso\" + \" \" + msg.unzipdir;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "aef29c2f6fb1ae0e",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 840,
        "wires": [
            [
                "c223eba39864f63e",
                "929888b23686884c"
            ],
            [
                "8b62e0d85a31d638",
                "50851a2aa40d6716"
            ]
        ]
    },
    {
        "id": "38680517166d75f2",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "debug 370",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 580,
        "wires": []
    },
    {
        "id": "8b62e0d85a31d638",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "L2T Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 700,
        "wires": []
    },
    {
        "id": "c223eba39864f63e",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "rm -rf ",
        "addpay": "unzipdir",
        "append": "",
        "useSpawn": "false",
        "timer": "300",
        "winHide": false,
        "oldrc": false,
        "name": "Delete Decompressed Dir",
        "x": 1350,
        "y": 780,
        "wires": [
            [],
            [],
            [
                "8e295048a3752df2"
            ]
        ]
    },
    {
        "id": "8e295048a3752df2",
        "type": "switch",
        "z": "f8d31b3f79add29b",
        "name": "Delete Folder",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1600,
        "y": 780,
        "wires": [
            [
                "a1ed6bf3ca374590",
                "c7d1af60f74efd2f"
            ],
            [
                "cbe146b403c6aec0",
                "81fe69036c81c53d"
            ]
        ]
    },
    {
        "id": "c7d1af60f74efd2f",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Folder Deletion Success",
        "mode": "link",
        "links": [
            "8f9d6c75a332b924"
        ],
        "x": 1715,
        "y": 720,
        "wires": []
    },
    {
        "id": "81fe69036c81c53d",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Folder Deletion Failure",
        "mode": "link",
        "links": [
            "0975b2e8606a7c44"
        ],
        "x": 1715,
        "y": 840,
        "wires": []
    },
    {
        "id": "cbe146b403c6aec0",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Folder Deletion Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 800,
        "wires": []
    },
    {
        "id": "a1ed6bf3ca374590",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Timesketch CLI params",
        "func": "// This Function node prepares the API call to TITAN_Processor to import a Plaso file into Timesketch.\n// It assumes the PREVIOUS step was a successful call to the /run_log2timeline API\n// and that its JSON response is in msg.payload.\n\nnode.warn(\"Node-RED: Preparing API call to import Plaso file into Timesketch.\");\n\n// 1. Check for success from the log2timeline step and get the path to the .plaso file.\n//    The successful response should have a 'status' of \"success\" and an 'output_file' key.\nif (!msg.payload || msg.payload.status !== \"success\" || !msg.payload.output_file) {\n    node.error(\"Previous log2timeline step did not report success or did not return an output_file. Halting Timesketch import.\", msg);\n    return null; // Stop the flow if the required Plaso path is missing.\n}\nvar plasoFilePath = msg.payload.output_file;\nnode.log(\"Plaso file to import: \" + plasoFilePath);\n\n\n// 2. Construct a descriptive name for the timeline in Timesketch.\n//    We can use the `job_base_name` that was set by the function that prepared the log2timeline call.\nvar timelineName = \"\";\nif (msg.job_base_name && typeof msg.job_base_name === 'string') {\n    timelineName = msg.job_base_name + \"-timeline\";\n} else {\n    // Fallback if job_base_name is not available, using the Plaso filename as a base.\n    timelineName = plasoFilePath.split(\"/\").pop();\n    node.warn(\"Could not find msg.job_base_name, using Plaso filename for timeline name: \" + timelineName);\n}\n\n// 3. Set the Timesketch connection details.\n//    The host is now the Docker service name for the Timesketch container.\nvar timesketchHost = \"http://timesketch:5000\"; // <-- Correct URL for container-to-container communication\nvar timesketchUser = \"titan\";                   // <-- VERIFY/CHANGE: This is the default from the Timesketch compose file\nvar timesketchPass = \"admin\";                   // <-- VERIFY/CHANGE: This is the default password\nvar sketchId = \"1\";                           // <-- VERIFY: Ensure a sketch with this ID exists in your Timesketch instance\n\n// 4. Prepare the JSON payload for the /import_to_timesketch API endpoint.\n//    This will be sent in the body of the HTTP POST request.\nvar apiPayload = {\n    plaso_file_path: plasoFilePath,\n    host: timesketchHost,\n    user: timesketchUser,\n    password: timesketchPass,\n    timeline_name: timelineName,\n    sketch_id: sketchId\n};\n// Overwrite msg.payload with the data for the *new* API call.\nmsg.payload = apiPayload; \n\n// 5. Set up the HTTP request properties for the 'http request' node that follows.\nmsg.url = \"http://titan_processor:5005/import_to_timesketch\";\nmsg.method = \"POST\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\n\nnode.warn(\"Node-RED: API Payload for Timesketch Import: \" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 960,
        "wires": [
            [
                "9faaba4eb1d9fb68"
            ]
        ]
    },
    {
        "id": "97c8951a9e7c5bec",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c2df1a428cd94263",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Timesketch Ingestion Success",
        "mode": "link",
        "links": [
            "a20fe85e7f1585f9",
            "f23c65b6a5d402fa"
        ],
        "x": 1705,
        "y": 940,
        "wires": []
    },
    {
        "id": "eeafbc27927a5598",
        "type": "comment",
        "z": "f8d31b3f79add29b",
        "name": "Change Timesketch CLI params here",
        "info": "",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "50851a2aa40d6716",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Plaso Failure",
        "mode": "link",
        "links": [
            "bc9fb963b0687733"
        ],
        "x": 1175,
        "y": 840,
        "wires": []
    },
    {
        "id": "929888b23686884c",
        "type": "link out",
        "z": "f8d31b3f79add29b",
        "name": "Notification-OUT-Plaso-Success",
        "mode": "link",
        "links": [
            "a05e730349905e6d"
        ],
        "x": 1175,
        "y": 720,
        "wires": []
    },
    {
        "id": "f2696de8258ca840",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Set-Log2timeline CLI params",
        "func": "// This Function node prepares an API call to run log2timeline on an unzipped directory\n// (e.g., from a KAPE or Velociraptor triage collection).\n// It assumes the previous step was a successful call to the /decompress_archive API\n// and that its response is in the current msg.payload.\n\nnode.warn(\"Node-RED: Preparing to run log2timeline on unzipped triage directory.\");\n\n// 1. Check for success from the decompression step and get the path to the unzipped folder.\nif (!msg.payload || msg.payload.status !== \"success\" || !msg.payload.output_directory) {\n    node.error(\"The previous decompression step did not succeed or did not return an output_directory. Halting log2timeline.\", msg);\n    return null; // Stop the flow if decompression failed.\n}\n\nvar unzippedDirectoryPath = msg.payload.output_directory;\nnode.log(\"Triage directory to process: \" + unzippedDirectoryPath);\n\n// 2. Create a unique name for the output Plaso file.\n//    We can use the `job_base_name` that was likely set on the msg object\n//    by the function node that prepared the decompression call.\nvar plasoBaseName = msg.job_base_name || unzippedDirectoryPath.split('/').pop();\nvar plasoOutputDir = \"/cases/plaso/\";\nvar outputPlasoFile = plasoOutputDir + plasoBaseName + \".plaso\";\n\n// 3. Store the output path on the msg object for the subsequent Timesketch import step.\n//    We use a distinct name like 'plaso_output_file_triage' to avoid conflict if\n//    other plaso files are processed in the same flow.\nmsg.plaso_output_file_triage = outputPlasoFile;\n\n// 4. Define log2timeline options for processing a directory.\n//    NOTE: The --partitions flag is REMOVED as it's not needed when the source is a directory.\nvar log2timelineOptions = \"--status_view none --parsers filestat,winreg,esedb,binary_cookies,chrome_cache,chrome_preferences,custom_destinations,czip,firefox_cache,firefox_cache2,java_idx,jsonl,lnk,mcafee_protection,msiecf,olecf,opera_global,opera_typed_history,pe,prefetch,recycle_bin,recycle_bin_info2,sqlite,symantec_scanlog,text,trendmicro_url,trendmicro_vd,windefender_history,winevt,winevtx,winjob\";\n\n// 5. Prepare the JSON payload for the /run_log2timeline API endpoint.\nvar apiPayload = {\n    input_file: unzippedDirectoryPath,   // The input is now the path to the unzipped DIRECTORY\n    output_file: outputPlasoFile,        // The path where the new .plaso file will be saved\n    options_str: log2timelineOptions     // The options for log2timeline\n};\nmsg.payload = apiPayload; // Overwrite msg.payload with the new data for the API call.\n\n// 6. Set up the HTTP request properties.\nmsg.url = \"http://titan_processor:5005/run_log2timeline\"; // We reuse the same API endpoint\nmsg.method = \"POST\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nnode.warn(\"Node-RED: API Payload for log2timeline on directory: \" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1020,
        "wires": [
            [
                "e41651cb0e3cc5dc"
            ]
        ]
    },
    {
        "id": "d85511cd72d84cd4",
        "type": "function",
        "z": "f8d31b3f79add29b",
        "name": "Assign TITAN Container",
        "func": "var titanList = ['titan_docker-titan-1', 'titan_docker-titan-2', 'titan_docker-titan-3', 'titan_docker-titan-4', 'titan_docker-titan-5'];\nvar counter = context.get('counter') || 0;\n\nmsg.container = titanList[counter];\ncounter = (counter + 1) % titanList.length;\ncontext.set('counter', counter);\n\nmsg.payload = `docker exec ${msg.container} python3 /mnt/TITAN/titan.py --process /cases/processor/${msg.filename}`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "97ed1971e1cfba03"
            ]
        ]
    },
    {
        "id": "97ed1971e1cfba03",
        "type": "exec",
        "z": "f8d31b3f79add29b",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run docker exec",
        "x": 490,
        "y": 100,
        "wires": [
            [
                "caf2ea36e84188f3"
            ],
            [],
            [
                "5b48534e1cd703c5"
            ]
        ]
    },
    {
        "id": "caf2ea36e84188f3",
        "type": "debug",
        "z": "f8d31b3f79add29b",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 520,
        "y": 20,
        "wires": []
    },
    {
        "id": "b7de806260036814",
        "type": "http request",
        "z": "f8d31b3f79add29b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "5beb4c8cbfb504ea",
        "type": "http request",
        "z": "f8d31b3f79add29b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "0abb6da646da8e2a"
            ]
        ]
    },
    {
        "id": "e41651cb0e3cc5dc",
        "type": "http request",
        "z": "f8d31b3f79add29b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 840,
        "wires": [
            [
                "aef29c2f6fb1ae0e"
            ]
        ]
    },
    {
        "id": "9faaba4eb1d9fb68",
        "type": "http request",
        "z": "f8d31b3f79add29b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 980,
        "wires": [
            [
                "381d356754cbd5b7"
            ]
        ]
    },
    {
        "id": "4a312f7b0984b364",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "/opt/hayabusa/./hayabusa ",
        "addpay": "hayabusa_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Hayabusa Evtx Process",
        "x": 330,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "328f7d20e1b1a833",
                "88bbb0dccda88902"
            ]
        ]
    },
    {
        "id": "328f7d20e1b1a833",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "a1b64661a3ee175c",
                "88bbb0dccda88902",
                "d8bdb8cfae1290b6"
            ],
            [
                "0974be28f22e530d"
            ]
        ]
    },
    {
        "id": "2397e77a3c79fda3",
        "type": "link in",
        "z": "44cf1917690496d8",
        "name": "Input Evtx Process",
        "links": [
            "52415c7bb8e16c3a"
        ],
        "x": 145,
        "y": 100,
        "wires": [
            [
                "4a312f7b0984b364"
            ]
        ]
    },
    {
        "id": "288080687e42e36c",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Hayabusa Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1240,
        "y": 180,
        "wires": [
            [
                "5e7cd7a03f986367"
            ],
            [
                "c47ba0bd5dd540ee"
            ]
        ]
    },
    {
        "id": "168748d31fb17282",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Hayabusa to Timesketch Failure",
        "mode": "link",
        "links": [
            "06f6e269d0983e6c"
        ],
        "x": 1615,
        "y": 340,
        "wires": []
    },
    {
        "id": "0974be28f22e530d",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Notification-OUT-Hayabusa Process Failure",
        "mode": "link",
        "links": [
            "3a52eeecb5988857"
        ],
        "x": 825,
        "y": 260,
        "wires": []
    },
    {
        "id": "a1b64661a3ee175c",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Notification-OUT-Hayabusa Process Success",
        "mode": "link",
        "links": [
            "63dc4d0d295180ee"
        ],
        "x": 825,
        "y": 220,
        "wires": []
    },
    {
        "id": "123e51f7f0621161",
        "type": "comment",
        "z": "44cf1917690496d8",
        "name": "Slack notification nodes",
        "info": "",
        "x": 1540,
        "y": 220,
        "wires": []
    },
    {
        "id": "c47ba0bd5dd540ee",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Notification-OUT-Hayabusa Timesketch Ingestion Failure",
        "mode": "link",
        "links": [
            "3f4ad6eb73e91522"
        ],
        "x": 1395,
        "y": 260,
        "wires": []
    },
    {
        "id": "80297e36a05a7d75",
        "type": "comment",
        "z": "44cf1917690496d8",
        "name": "Slack notification nodes",
        "info": "",
        "x": 1280,
        "y": 60,
        "wires": []
    },
    {
        "id": "b303c561e5640afb",
        "type": "comment",
        "z": "44cf1917690496d8",
        "name": "Change Hayabusa Path here",
        "info": "",
        "x": 360,
        "y": 120,
        "wires": []
    },
    {
        "id": "88bbb0dccda88902",
        "type": "debug",
        "z": "44cf1917690496d8",
        "name": "Hayabusa Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 60,
        "wires": []
    },
    {
        "id": "759b33a1f760e6a4",
        "type": "debug",
        "z": "44cf1917690496d8",
        "name": "Chainsaw Processed Completed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 340,
        "wires": []
    },
    {
        "id": "d16c6f5299b56c8b",
        "type": "exec",
        "z": "44cf1917690496d8",
        "d": true,
        "command": "/opt/chainsaw/./chainsaw ",
        "addpay": "chainsaw_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Chainsaw Evtx Process",
        "x": 650,
        "y": 400,
        "wires": [
            [],
            [],
            [
                "0fe5ad9ebca6b604",
                "759b33a1f760e6a4"
            ]
        ]
    },
    {
        "id": "0fe5ad9ebca6b604",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 940,
        "y": 460,
        "wires": [
            [
                "759b33a1f760e6a4",
                "4a637e84a8bf980d"
            ],
            []
        ]
    },
    {
        "id": "669139136ac1b7d4",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "Chainsaw Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1400,
        "y": 380,
        "wires": [
            [
                "168748d31fb17282"
            ],
            [
                "168748d31fb17282"
            ]
        ]
    },
    {
        "id": "5e7cd7a03f986367",
        "type": "switch",
        "z": "44cf1917690496d8",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "179dd871fee9e505"
            ],
            [
                "16fdaad9b8498532"
            ]
        ]
    },
    {
        "id": "bb69c0afc9f65daf",
        "type": "exec",
        "z": "44cf1917690496d8",
        "command": "/opt/chainsaw/./chainsaw ",
        "addpay": "chainsaw_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Chainsaw Evtx Process",
        "x": 630,
        "y": 480,
        "wires": [
            [],
            [],
            [
                "0fe5ad9ebca6b604",
                "759b33a1f760e6a4"
            ]
        ]
    },
    {
        "id": "4a637e84a8bf980d",
        "type": "link out",
        "z": "44cf1917690496d8",
        "name": "Chainsaw Process",
        "mode": "link",
        "links": [
            "a8a370357488b800"
        ],
        "x": 1115,
        "y": 560,
        "wires": []
    },
    {
        "id": "e610cc78abebc271",
        "type": "link in",
        "z": "44cf1917690496d8",
        "name": "Output Chainsaw Process",
        "links": [
            "1b3d5967be2bbeb8"
        ],
        "x": 1195,
        "y": 440,
        "wires": [
            [
                "669139136ac1b7d4"
            ]
        ]
    },
    {
        "id": "179dd871fee9e505",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "Prepare Chainsaw API Call",
        "func": "// Node-RED Function node: \"Prepare Chainsaw API Call\"\n// Assumes msg.dirname (e.g., /cases/processor/myimage_extracted/) and \n// msg.plasofname (e.g., myimage or similar base for job naming) are available.\n\nnode.warn(\"Node-RED: Preparing API call for /run_chainsaw\");\n\nvar evtxDirectory = \"\";\n// Construct path to EVTX logs based on where your mount/extraction places them\nif (msg.dirname && typeof msg.dirname === 'string') {\n    evtxDirectory = msg.dirname + '/C/Windows/System32/winevt/Logs/';\n} else {\n    node.error(\"msg.dirname is missing or invalid for Chainsaw EVTX path.\", msg);\n    return null;\n}\n\nvar chainsawJobName = \"\"; // Initialize as an empty string\nif (msg.plasofname && typeof msg.plasofname === 'string') {\n    chainsawJobName = msg.plasofname.includes('/') ? msg.plasofname.split(\"/\").pop() : msg.plasofname;\n    chainsawJobName += \"-chainsaw\";\n} else if (msg.filename && typeof msg.filename === 'string') {\n    try {\n        chainsawJobName = msg.filename.split(\"/\").pop().split(\".\")[0].toLowerCase() + \"-chainsaw\";\n    } catch (e) {\n        node.warn(\"Error splitting msg.filename for chainsawJobName: \" + e.message);\n        // Fallback if splitting fails\n        var ts = new Date().toISOString().substring(0,10).replace(/-/g,\"\");\n        chainsawJobName = \"chainsaw_job_\" + ts;\n    }\n}\n\n// If chainsawJobName is still empty after trying the above, create a generic one.\nif (!chainsawJobName) { // Check if it's empty\n    var ts = new Date().toISOString().substring(0,10).replace(/-/g,\"\");\n    chainsawJobName = \"chainsaw_job_\" + ts;\n    // Simplified warning - just the string. Add a separate debug node if you need to see the full msg object here.\n    node.warn(\"Could not determine Chainsaw job name from msg.plasofname or msg.filename. Using generic: \" + chainsawJobName);\n}\n\n\n// This is the base directory where Chainsaw will store its multiple CSV outputs\nvar chainsawOutputBaseDirectory = '/cases/evtxproc/chainsaw/' + chainsawJobName + '/'; // Note trailing slash for directory\n\n// Store information for the *next* stage (importing these CSVs to Timesketch)\nmsg.timesketch_sketch_id_for_chainsaw = \"1\"; // Or your desired sketch ID\nmsg.chainsaw_timeline_prefix = chainsawJobName; // Base for naming individual timelines\n\n// Prepare the JSON payload for the /run_chainsaw API endpoint\nmsg.payload = {\n    evtx_dir_path: evtxDirectory,\n    output_directory: chainsawOutputBaseDirectory\n};\n\nmsg.url = \"http://titan_processor:5005/run_chainsaw\";\nmsg.method = \"POST\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\n\nnode.warn(\"Node-RED: API Payload for /run_chainsaw: \" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "d16c6f5299b56c8b",
                "0d799067e797df8a"
            ]
        ]
    },
    {
        "id": "16fdaad9b8498532",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "VR Chainsaw Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.vr = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs/';\nmsg.chainsaw_job = + msg.plasofname + '-chainsaw';\nmsg.chainsaw_dir = msg.plasofname;\nmsg.chainsaw_files = '/cases/evtxproc/chainsaw/' + msg.plasofname +'/';\nmsg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.chainsaw_dir;\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.plasofname ;\nmsg.chainsaw_exec = 'hunt -q ' + msg.vr + ' -s /opt/chainsaw/sigma/ --mapping /opt/chainsaw/mappings/sigma-event-logs-all.yml -r /opt/chainsaw/rules/ --csv --output ' + msg.chainsaw_out;\nmsg.chainsaw_ts1 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_antivirus\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"antivirus.csv\";\nmsg.chainsaw_ts2 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rds_events_-_user_profile_disk\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"microsoft_rds_events_-_user_profile_disk.csv\";\nmsg.chainsaw_ts3 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-hainsaw_powershell_script.\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"powershell_script.csv\";\nmsg.chainsaw_ts4 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_rdp_events\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"rdp_events.csv\";\nmsg.chainsaw_ts5 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts6 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_sigma\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"sigma.csv\";\nmsg.chainsaw_ts7 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_account_tampering\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"account_tampering.csv\";\nmsg.chainsaw_ts8 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_applocker\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"applocker.csv\";\nmsg.chainsaw_ts9 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_credential_access\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"credential_access.csv\";\nmsg.chainsaw_ts10 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_defensive_evasion\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"defensive_evasion.csv\";\nmsg.chainsaw_ts11 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_lateral_movement\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"lateral_movement.csv\";\nmsg.chainsaw_ts12 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_log_tampering\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"log_tampering.csv\";\nmsg.chainsaw_ts13 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_login_attacks\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"login_attacks.csv\";\nmsg.chainsaw_ts14 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rasvpn_events\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"microsoft_rasvpn_events.csv\";\nmsg.chainsaw_ts15 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts16 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_tampering\" + \" --sketch_id \" + \"7 \" + msg.chainsaw_files + \"service_tampering.csv\";\n\nreturn msg;\n\n\n// I MAY HAVE TO SPLIT THIS UP INTO Different nodes/functions",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            [
                "bb69c0afc9f65daf"
            ]
        ]
    },
    {
        "id": "ee1072af983209c4",
        "type": "debug",
        "z": "44cf1917690496d8",
        "name": "debug 369",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 80,
        "wires": []
    },
    {
        "id": "0d799067e797df8a",
        "type": "http request",
        "z": "44cf1917690496d8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d8bdb8cfae1290b6",
        "type": "function",
        "z": "44cf1917690496d8",
        "name": "Prepare Hayabusa CSV Import to Timesketch",
        "func": "// Node-RED Function node: \"Prepare Hayabusa CSV Import to Timesketch\"\nnode.warn(\"Node-RED: Preparing API call to import Hayabusa CSV to Timesketch.\");\n\nvar hayabusaCsvFile = msg.hayabusa_output_csv_for_timesketch;\nvar timelineName = msg.hayabusa_timeline_name_for_timesketch;\nvar sketchId = msg.timesketch_sketch_id_for_hayabusa || \"1\"; // Default if not set\n\nif (!hayabusaCsvFile) {\n    node.error(\"Hayabusa output CSV path (msg.hayabusa_output_csv_for_timesketch) is missing!\", msg);\n    return null;\n}\n\nvar timesketchHost = \"http://timesketch:5000\"; // Your Timesketch host:port\nvar timesketchUser = \"titan\"; // Your Timesketch user\nvar timesketchPass = \"admin\"; // Your Timesketch password\n\nmsg.payload = {\n    plaso_file_path: hayabusaCsvFile, // The /import_to_timesketch API expects 'plaso_file_path' for any file\n    host: timesketchHost,\n    user: timesketchUser,\n    password: timesketchPass,\n    timeline_name: timelineName,\n    sketch_id: sketchId\n};\n\nmsg.url = \"http://titan_processor:5005/import_to_timesketch\";\nmsg.method = \"POST\";\nmsg.headers = { \"Content-Type\": \"application/json\" };\n\nnode.warn(\"Node-RED: API Payload for Hayabusa CSV Timesketch Import: \" + JSON.stringify(msg.payload));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 140,
        "wires": [
            [
                "8d4b35e0588683e0"
            ]
        ]
    },
    {
        "id": "8d4b35e0588683e0",
        "type": "http request",
        "z": "44cf1917690496d8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a8a370357488b800",
        "type": "link in",
        "z": "6e13988923128d2e",
        "name": "Input Chainsaw Process",
        "links": [
            "4a637e84a8bf980d",
            "d0eb0f234d9a3a71"
        ],
        "x": 375,
        "y": 200,
        "wires": [
            [
                "0fc9cfb2647b4ea1"
            ]
        ]
    },
    {
        "id": "0fc9cfb2647b4ea1",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts1",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "6811e5ee53562008"
            ]
        ]
    },
    {
        "id": "6811e5ee53562008",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts2",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "3380ac24cd729c8d"
            ]
        ]
    },
    {
        "id": "3380ac24cd729c8d",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts3",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "c9dfe1b2a97cc335"
            ]
        ]
    },
    {
        "id": "c9dfe1b2a97cc335",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts4",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "8ae44222fac857d9"
            ]
        ]
    },
    {
        "id": "8ae44222fac857d9",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts5",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "555edaa77417df0c"
            ]
        ]
    },
    {
        "id": "555edaa77417df0c",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts6",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 560,
        "y": 500,
        "wires": [
            [],
            [],
            [
                "86c729f8de34f9e1"
            ]
        ]
    },
    {
        "id": "86c729f8de34f9e1",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts7",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "07661aa530e6e731"
            ]
        ]
    },
    {
        "id": "07661aa530e6e731",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts8",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "e1b708593e35d831"
            ]
        ]
    },
    {
        "id": "e1b708593e35d831",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts9",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "96be38e2ee590f2b"
            ]
        ]
    },
    {
        "id": "96be38e2ee590f2b",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts10",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "80020e237909b345"
            ]
        ]
    },
    {
        "id": "80020e237909b345",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts11",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 840,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "6fe252ef01a464e0"
            ]
        ]
    },
    {
        "id": "6fe252ef01a464e0",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts12",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "fa81bdf440e5e75f"
            ]
        ]
    },
    {
        "id": "fa81bdf440e5e75f",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts13",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "3e975e6ea24a7597"
            ]
        ]
    },
    {
        "id": "3e975e6ea24a7597",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts14",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "4c3c56afe34e2fa4"
            ]
        ]
    },
    {
        "id": "4c3c56afe34e2fa4",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts15",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "c9a7eba5081c3fe9"
            ]
        ]
    },
    {
        "id": "c9a7eba5081c3fe9",
        "type": "exec",
        "z": "6e13988923128d2e",
        "command": "timesketch_importer",
        "addpay": "chainsaw_ts16",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Chainsaw data",
        "x": 1120,
        "y": 440,
        "wires": [
            [],
            [
                "1b3d5967be2bbeb8"
            ],
            [
                "1b3d5967be2bbeb8"
            ]
        ]
    },
    {
        "id": "1b3d5967be2bbeb8",
        "type": "link out",
        "z": "6e13988923128d2e",
        "name": "Output Chainsaw Process",
        "mode": "link",
        "links": [
            "e610cc78abebc271",
            "deb1f0c1f71c12b2"
        ],
        "x": 1355,
        "y": 480,
        "wires": []
    },
    {
        "id": "06f6e269d0983e6c",
        "type": "link in",
        "z": "04752156b5b5fd4d",
        "name": "Zircolite IN",
        "links": [
            "168748d31fb17282"
        ],
        "x": 245,
        "y": 280,
        "wires": [
            [
                "0df6c8a31ee94904"
            ]
        ]
    },
    {
        "id": "c247661a1a9c10c9",
        "type": "exec",
        "z": "04752156b5b5fd4d",
        "command": "python3 /home/titan/Downloads/Zircolite-2.20.0/zircolite.py",
        "addpay": "zircolite_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 1060,
        "y": 220,
        "wires": [
            [],
            [],
            [
                "4ec625a1847231a1"
            ]
        ]
    },
    {
        "id": "ea5d321547a3dc99",
        "type": "function",
        "z": "04752156b5b5fd4d",
        "name": "KAPE Zircolite Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/C/Windows/System32/winevt/logs/';\nmsg.zircolite_job = msg.plasofname + '-zircolite';\nmsg.zircolite_out = '/cases/' + msg.zircolite_job;\nmsg.zircolite_exec = 'python3 /home/titan/Downloads/Zircolite-2.20.0/zircolite.py --evtx' + msg.kape + '--ruleset /home/titan/Downloads/Zircolite-2.20.0/rules/rules_windows_generic_high.json --template /home/titan/Downloads/Zircolite-2.20.0/templates/exportForZircoGui.tmpl --templateOutput data.js'\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "c247661a1a9c10c9"
            ]
        ]
    },
    {
        "id": "0df6c8a31ee94904",
        "type": "switch",
        "z": "04752156b5b5fd4d",
        "name": "",
        "property": "dirname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/kape/",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "/collection/",
                "vt": "msg",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "ea5d321547a3dc99"
            ],
            [
                "95a44cf0d5fe6070"
            ]
        ]
    },
    {
        "id": "4ec625a1847231a1",
        "type": "exec",
        "z": "04752156b5b5fd4d",
        "command": "7z x /home/titan/Downloads/Zircolite-2.20.0/gui/zircogui.zip",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "7z Zircolite",
        "x": 1290,
        "y": 220,
        "wires": [
            [],
            [],
            [
                "c9fcc8cd7bb95b1f"
            ]
        ]
    },
    {
        "id": "c9fcc8cd7bb95b1f",
        "type": "exec",
        "z": "04752156b5b5fd4d",
        "command": "mv data.js /home/titan/Downloads/Zircolite-2.20.0/zircogui/",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Move Zircolite",
        "x": 1520,
        "y": 220,
        "wires": [
            [],
            [],
            [
                "3ec01c328f4d8b9c"
            ]
        ]
    },
    {
        "id": "3ec01c328f4d8b9c",
        "type": "exec",
        "z": "04752156b5b5fd4d",
        "command": "cp home/dfir/Downloads/Zircolite-2.20.0/zircogui/ /cases/",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Copy folder",
        "x": 1750,
        "y": 220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "0ea2af9d8a1fd1f5",
        "type": "exec",
        "z": "04752156b5b5fd4d",
        "command": "",
        "addpay": "zircolite_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Zircolite Process",
        "x": 980,
        "y": 360,
        "wires": [
            [],
            [],
            [
                "4edd1f0f5038e0fc"
            ]
        ]
    },
    {
        "id": "5c6f967fb9f2126b",
        "type": "exec",
        "z": "04752156b5b5fd4d",
        "command": "mv /opt/Zircolite-2.20.0/data.js /home/titan/Downloads/zircogui/",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Move Zircolite",
        "x": 1460,
        "y": 440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "95a44cf0d5fe6070",
        "type": "function",
        "z": "04752156b5b5fd4d",
        "name": "VR Zircolite Process Variables",
        "func": "// Create a variable to store the EVTX directory path\nmsg.collection = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs';\n// msg.collection = msg.dirname + '/uploads/auto/' + decodeURIComponent('C%3A/Windows/System32/winevt/Logs');\n\nmsg.zircolite_job = msg.plasofname + '-zircolite';\nmsg.zircolite_out = '/cases/' + msg.zircolite_job;\nmsg.zircolite_exec = 'sudo -u titan python3 /opt/Zircolite-2.20.0/zircolite.py --evtx ' + msg.collection + ' --ruleset /opt/Zircolite-2.20.0/rules/rules_windows_generic.json --template /opt/Zircolite-2.20.0/templates/exportForZircoGui.tmpl --templateOutput /opt/Zircolite-2.20.0/data.js --evtx_dump /opt/Zircolite-2.20.0/bin/evtx_dump_lin --config /opt/Zircolite-2.20.0/config/fieldMappings.json > /tmp/zircolite_out.log 2>&1';// Log the constructed command for debuggingnode.warn(\"Constructed Command: \" + msg.zircolite_exec);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "0ea2af9d8a1fd1f5"
            ]
        ]
    },
    {
        "id": "8a8dd12a6b036164",
        "type": "link out",
        "z": "04752156b5b5fd4d",
        "name": "Notification-OUT-Zircolite Failure",
        "mode": "link",
        "links": [
            "bc9fb963b0687733",
            "f2b20249a3b567d0"
        ],
        "x": 1235,
        "y": 520,
        "wires": []
    },
    {
        "id": "4edd1f0f5038e0fc",
        "type": "switch",
        "z": "04752156b5b5fd4d",
        "name": "Zircolite Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 440,
        "wires": [
            [
                "23a644f53fb9c157",
                "5c6f967fb9f2126b"
            ],
            [
                "8a8dd12a6b036164"
            ]
        ]
    },
    {
        "id": "23a644f53fb9c157",
        "type": "link out",
        "z": "04752156b5b5fd4d",
        "name": "Notification-OUT-Zircolite-Success",
        "mode": "link",
        "links": [
            "87a3a68763e95e33",
            "a05e730349905e6d"
        ],
        "x": 1235,
        "y": 340,
        "wires": []
    },
    {
        "id": "232909e18733720e",
        "type": "function",
        "z": "04752156b5b5fd4d",
        "name": "VR Zircolite Process Variables",
        "func": "// Create a variable to store the EVTX directory path\nmsg.collection = msg.dirname + '/uploads/auto/C%3A/Windows/System32/winevt/Logs';\n// msg.collection = msg.dirname + '/uploads/auto/' + decodeURIComponent('C%3A/Windows/System32/winevt/Logs');\n\nmsg.zircolite_job = msg.plasofname + '-zircolite';\nmsg.zircolite_out = '/cases/' + msg.zircolite_job;\nmsg.zircolite_exec = 'python3 /home/titan/Downloads/ai.py;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 1,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 560,
        "wires": [
            [
                "5abe1309138aba0e"
            ]
        ]
    },
    {
        "id": "5abe1309138aba0e",
        "type": "exec",
        "z": "04752156b5b5fd4d",
        "command": "",
        "addpay": "zircolite_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Zircolite Process",
        "x": 1900,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d649aec3fda5dcd1",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Windows Velociraptor Deploy",
        "url": "/trigger-velociraptor-deploy-windows",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "8b076515d116f8b5"
            ]
        ]
    },
    {
        "id": "8b076515d116f8b5",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor",
        "func": "return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 240,
        "wires": [
            [
                "5fe2e7c4da13f38d"
            ]
        ]
    },
    {
        "id": "2941af0e67218b83",
        "type": "http response",
        "z": "c3602a6773d817e7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 240,
        "wires": []
    },
    {
        "id": "1417c36413a16a7e",
        "type": "debug",
        "z": "c3602a6773d817e7",
        "name": "debug 371",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 240,
        "wires": []
    },
    {
        "id": "5fe2e7c4da13f38d",
        "type": "exec",
        "z": "c3602a6773d817e7",
        "command": "",
        "addpay": "veloagent_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Velo Agent Deploy Process",
        "x": 960,
        "y": 240,
        "wires": [
            [
                "1417c36413a16a7e"
            ],
            [
                "1417c36413a16a7e"
            ],
            [
                "2941af0e67218b83",
                "1417c36413a16a7e"
            ]
        ]
    },
    {
        "id": "92b6ecbe7611f699",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Windows Velociraptor Remove ",
        "url": "/trigger-velociraptor-remove-windows",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "0c337632f9877ead"
            ]
        ]
    },
    {
        "id": "0c337632f9877ead",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor",
        "func": "return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 440,
        "wires": [
            [
                "2fb5a7625233377d"
            ]
        ]
    },
    {
        "id": "f75d1f535e3e5e41",
        "type": "http response",
        "z": "c3602a6773d817e7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 440,
        "wires": []
    },
    {
        "id": "2fb5a7625233377d",
        "type": "exec",
        "z": "c3602a6773d817e7",
        "command": "",
        "addpay": "veloagent_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Velo Agent Deploy Process",
        "x": 960,
        "y": 440,
        "wires": [
            [
                "91f2a961ca4e88cb"
            ],
            [
                "91f2a961ca4e88cb"
            ],
            [
                "f75d1f535e3e5e41",
                "91f2a961ca4e88cb"
            ]
        ]
    },
    {
        "id": "a8db5d877fbf4b0f",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Linux Velociraptor Deploy",
        "url": "/trigger-velociraptor-deploy-linux",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 390,
        "y": 240,
        "wires": [
            [
                "ad7ef864afd106b9"
            ]
        ]
    },
    {
        "id": "ad7ef864afd106b9",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor (normal)",
        "func": "const username = msg.payload.username || 'titan'; // Default to 'titan' if username is not provided\nconst password = msg.payload.password || ''; // Ensure we receive the password\n\nif (password === '') {\n    node.error(\"Password not provided\");\n    return;\n}\n\n// Command to install the Velociraptor agent\nconst installCommand = `echo ${password} | sudo -S dpkg -i /home/${username}/Downloads/velociraptor/velociraptor_client_0.72.0_amd64.deb`;\n\nmsg.payload = installCommand;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            [
                "d2540cd1de09d5f7"
            ]
        ]
    },
    {
        "id": "5971cb3a426fb896",
        "type": "http response",
        "z": "c3602a6773d817e7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 300,
        "wires": []
    },
    {
        "id": "db66436dd1b19127",
        "type": "debug",
        "z": "c3602a6773d817e7",
        "name": "debug 372",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 300,
        "wires": []
    },
    {
        "id": "d2540cd1de09d5f7",
        "type": "exec",
        "z": "c3602a6773d817e7",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Velo Agent Deploy Process",
        "x": 960,
        "y": 300,
        "wires": [
            [
                "db66436dd1b19127"
            ],
            [
                "db66436dd1b19127"
            ],
            [
                "5971cb3a426fb896",
                "db66436dd1b19127"
            ]
        ]
    },
    {
        "id": "4db02573a9be881c",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Mac Velociraptor Deploy",
        "url": "/trigger-velociraptor-deploy-mac",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 390,
        "y": 360,
        "wires": [
            [
                "d1269538c22efc18"
            ]
        ]
    },
    {
        "id": "d1269538c22efc18",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor",
        "func": "return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 380,
        "wires": [
            [
                "e67768f7fdba5956"
            ]
        ]
    },
    {
        "id": "703e82c05f03e223",
        "type": "http response",
        "z": "c3602a6773d817e7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 360,
        "wires": []
    },
    {
        "id": "5c1cf5fd7804d779",
        "type": "debug",
        "z": "c3602a6773d817e7",
        "name": "debug 373",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 360,
        "wires": []
    },
    {
        "id": "e67768f7fdba5956",
        "type": "exec",
        "z": "c3602a6773d817e7",
        "command": "",
        "addpay": "veloagent_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Velo Agent Deploy Process",
        "x": 960,
        "y": 360,
        "wires": [
            [
                "5c1cf5fd7804d779"
            ],
            [
                "5c1cf5fd7804d779"
            ],
            [
                "703e82c05f03e223",
                "5c1cf5fd7804d779"
            ]
        ]
    },
    {
        "id": "1d659436460f94a2",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Linux Velociraptor Remove",
        "url": "/trigger-velociraptor-remove-linux",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 520,
        "wires": [
            [
                "d1d0237cb431b4f8"
            ]
        ]
    },
    {
        "id": "e9c8e3cef59c9bdd",
        "type": "http response",
        "z": "c3602a6773d817e7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "63201c2ce33c1965",
        "type": "exec",
        "z": "c3602a6773d817e7",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Velo Agent Deploy Process",
        "x": 960,
        "y": 540,
        "wires": [
            [
                "a9fabf6f44071afb"
            ],
            [
                "a9fabf6f44071afb"
            ],
            [
                "e9c8e3cef59c9bdd",
                "a9fabf6f44071afb"
            ]
        ]
    },
    {
        "id": "f25a3cf8896d706d",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Mac Velociraptor Remove",
        "url": "/trigger-velociraptor-remove-mac",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 740,
        "wires": [
            [
                "28c5547f5deb721b"
            ]
        ]
    },
    {
        "id": "28c5547f5deb721b",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor",
        "func": "return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "bcc5cff0fa066796"
            ]
        ]
    },
    {
        "id": "09710df508c48a6d",
        "type": "http response",
        "z": "c3602a6773d817e7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 560,
        "wires": []
    },
    {
        "id": "bcc5cff0fa066796",
        "type": "exec",
        "z": "c3602a6773d817e7",
        "command": "",
        "addpay": "veloagent_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Velo Agent Deploy Process",
        "x": 960,
        "y": 640,
        "wires": [
            [
                "1ef525a031eabac4"
            ],
            [
                "1ef525a031eabac4"
            ],
            [
                "09710df508c48a6d",
                "1ef525a031eabac4"
            ]
        ]
    },
    {
        "id": "f652db4fe4aeb67b",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Linux Velociraptor Deploy",
        "url": "/trigger-velociraptor-deploy-linux",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 390,
        "y": 300,
        "wires": [
            [
                "ad7ef864afd106b9"
            ]
        ]
    },
    {
        "id": "91f2a961ca4e88cb",
        "type": "debug",
        "z": "c3602a6773d817e7",
        "name": "debug 374",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 440,
        "wires": []
    },
    {
        "id": "a9fabf6f44071afb",
        "type": "debug",
        "z": "c3602a6773d817e7",
        "name": "debug 375",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 500,
        "wires": []
    },
    {
        "id": "1ef525a031eabac4",
        "type": "debug",
        "z": "c3602a6773d817e7",
        "name": "debug 376",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 560,
        "wires": []
    },
    {
        "id": "e88a6ec548feb24f",
        "type": "http in",
        "z": "c3602a6773d817e7",
        "name": "Trigger Linux Velociraptor Remove",
        "url": "/trigger-velociraptor-remove-linux",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "d1d0237cb431b4f8"
            ]
        ]
    },
    {
        "id": "a48336ac25e8d525",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Remove Linux Velociraptor (sudoers)",
        "func": "const username = msg.payload.username || 'titan'; // Default to 'titan' if username is not provided\nconst password = msg.payload.password || ''; // Ensure we receive the password\n\nif (!password) {\n    node.error(\"Password not provided\");\n    return;\n}\n\n// The line to add to the sudoers file, with escaped parentheses\nconst sudoersLine = `${username} ALL=\\\\(ALL\\\\) NOPASSWD: /usr/bin/apt-get`;\n\n// Command to check and add the sudoers line\nconst checkAndAddSudoersCommand = `echo ${password} | sudo -S grep -qxF '${sudoersLine}' /etc/sudoers || echo '${sudoersLine}' | sudo tee -a /etc/sudoers`;\n\n// Command to remove the Velociraptor agent\nconst removeCommand = `echo ${password} | sudo -S apt-get remove -y velociraptor-client`;\n\n// Combine both commands into one\nmsg.payload = `${checkAndAddSudoersCommand} && ${removeCommand}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "11708bf0d81c39cb",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor",
        "func": "const username = msg.username || 'titan'; // Default to 'titan' if msg.username is not set\nconst password = msg.payload.password || ''; // Ensure we receive the password\n\nif (password === '') {\n    node.error(\"Password not provided\");\n    return;\n}\n\n// The line to add to the sudoers file\nconst sudoersLine = `${username} ALL=(ALL) NOPASSWD: /usr/bin/apt-get`;\n\n// Command to check and add the sudoers line\nconst checkAndAddSudoersCommand = `echo ${password} | sudo -S grep -qxF \"${sudoersLine}\" /etc/sudoers || echo ${sudoersLine} | sudo tee -a /etc/sudoers`;\n\n// Command to remove the Velociraptor agent\nconst removeCommand = `echo ${password} | sudo apt-get remove -y velociraptor-client`;\n\n// Combine both commands into one\nmsg.payload = `${checkAndAddSudoersCommand} && ${removeCommand}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "55042c04d67764de",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor",
        "func": "const username = msg.username || 'titan'; \nconst password = msg.payload.password || '';\n\nif (!password) {\n    node.error(\"Password not provided\");\n    return;\n}\n\nconst removeCommand = `echo ${password} | sudo apt-get remove -y velociraptor-client`;\nnode.warn(`Command: ${removeCommand}`); // Log the command to see what is being executed\n\nmsg.payload = removeCommand;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "dc6b65ae31c24da0",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Deploy Velociraptor (sudoers)",
        "func": "const username = msg.payload.username || 'titan'; // Default to 'titan' if username is not provided\nconst password = msg.payload.password || ''; // Ensure we receive the password\n\nif (password === '') {\n    node.error(\"Password not provided\");\n    return;\n}\n\n// The line to add to the sudoers file, with escaped parentheses\nconst sudoersLine = `${username} ALL=\\\\(ALL\\\\) NOPASSWD: /usr/bin/dpkg`;\n\n// Command to check and add the sudoers line\nconst checkAndAddSudoersCommand = `echo ${password} | sudo -S grep -qxF '${sudoersLine}' /etc/sudoers || echo '${sudoersLine}' | sudo tee -a /etc/sudoers`;\n\n// Command to install the Velociraptor agent\nconst installCommand = `echo ${password} | sudo -S dpkg -i /home/${username}/Downloads/velociraptor/velociraptor_client_0.72.0_amd64.deb`;\n\n// Combine both commands into one\nmsg.payload = `${checkAndAddSudoersCommand} && ${installCommand}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d1d0237cb431b4f8",
        "type": "function",
        "z": "c3602a6773d817e7",
        "name": "Remove Linux Velociraptor (normal)",
        "func": "const username = msg.username || 'titan';\nconst password = msg.payload.password || '';\n\nif (!password) {\n    node.error(\"Password not provided\");\n    return;\n}\n\nconst removeCommand = `echo ${password} | sudo -S apt-get remove -y velociraptor-client`;\n\nmsg.payload = removeCommand;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "63201c2ce33c1965"
            ]
        ]
    },
    {
        "id": "edcac73c6d2f1fd4",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Decompression Success",
        "links": [
            "562bd891136c7a22"
        ],
        "x": 255,
        "y": 120,
        "wires": [
            [
                "65be5cd6680294ca"
            ]
        ]
    },
    {
        "id": "65be5cd6680294ca",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Decompression Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" +msg.filename + \" file was decompressed successfully\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "b43ee8044209a3aa",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Decompression Failure",
        "links": [
            "d3ad201a6345ec44"
        ],
        "x": 255,
        "y": 180,
        "wires": [
            [
                "f3c0e7e411c7a61e"
            ]
        ]
    },
    {
        "id": "f3c0e7e411c7a61e",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Decompression Failure",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + msg.filename + \" file decompression was unsuccessful\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "bc9fb963b0687733",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Plaso Generation Failure",
        "links": [
            "50851a2aa40d6716",
            "8a8dd12a6b036164",
            "14bab364f8feaf6e"
        ],
        "x": 255,
        "y": 240,
        "wires": [
            [
                "f1d981dde4fef202"
            ]
        ]
    },
    {
        "id": "a05e730349905e6d",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Plaso Generation Success",
        "links": [
            "929888b23686884c",
            "23a644f53fb9c157",
            "2ffdc2b4eed16da7"
        ],
        "x": 255,
        "y": 300,
        "wires": [
            [
                "eb6ca784fc1eaaa7"
            ]
        ]
    },
    {
        "id": "f1d981dde4fef202",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Plaso Generation Failure",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Plaso file generation failed for  \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "eb6ca784fc1eaaa7",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Plaso Generation Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Plaso file generation successful for  \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "a20fe85e7f1585f9",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Timesketch Ingestion Success",
        "links": [
            "c2df1a428cd94263"
        ],
        "x": 255,
        "y": 480,
        "wires": [
            [
                "ba5b6632cd41e404"
            ]
        ]
    },
    {
        "id": "ba5b6632cd41e404",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Timesketch Ingestion Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Ingestion of \" + msg.plasofname +\".plaso\" + \" to Timesketch was successful\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "c87ad6c2583e31df",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Timesketch Ingestion Failure",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Ingestion of \" + msg.plasofname +\".plaso\" + \" to Timesketch has failed\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "e1b089d27626665d",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Timesketch Ingestion Failure",
        "links": [
            "8a7ad3746fdfc178"
        ],
        "x": 255,
        "y": 540,
        "wires": [
            [
                "c87ad6c2583e31df"
            ]
        ]
    },
    {
        "id": "75769f870091de80",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Queue Release",
        "links": [
            "62e7086b962f93fe"
        ],
        "x": 255,
        "y": 60,
        "wires": [
            [
                "cba9b76cb1c56b4a"
            ]
        ]
    },
    {
        "id": "cba9b76cb1c56b4a",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Queue Release",
        "func": "\nmsg.payload = new Date().toISOString() + \" - \" + msg.filename + \" file was released from the queue for processing\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "8f9d6c75a332b924",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Folder Deletion Success",
        "links": [
            "c7d1af60f74efd2f"
        ],
        "x": 255,
        "y": 600,
        "wires": [
            [
                "aeef9d6ba04ddb3e"
            ]
        ]
    },
    {
        "id": "0975b2e8606a7c44",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Folder Deletion Failure",
        "links": [
            "81fe69036c81c53d"
        ],
        "x": 255,
        "y": 660,
        "wires": [
            [
                "4ba15d4b23220bd2"
            ]
        ]
    },
    {
        "id": "aeef9d6ba04ddb3e",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Folder Deletion Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Ingestion of \" + msg.dirname + \" folder was successfully deleted\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "4ba15d4b23220bd2",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Folder Deletion Failure",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Ingestion of \" + msg.dirname + \" folder deletion failed\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "63dc4d0d295180ee",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Hayabusa Process Success",
        "links": [
            "a1b64661a3ee175c"
        ],
        "x": 255,
        "y": 720,
        "wires": [
            [
                "4b974ddf0ca8899f"
            ]
        ]
    },
    {
        "id": "3a52eeecb5988857",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Hayabusa Process Failure",
        "links": [
            "0974be28f22e530d"
        ],
        "x": 255,
        "y": 780,
        "wires": [
            [
                "d74f86e56560270b"
            ]
        ]
    },
    {
        "id": "4b974ddf0ca8899f",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Hayabusa Process Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Hayabusa processing of \" + msg.winevt + \" was successful\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "d74f86e56560270b",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Hayabusa Process Failure",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Hayabusa processing of \" + msg.winevt + \" has failed\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 780,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "190cbf4e80bfdd18",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Hayabusa Timesketch Ingestion Success",
        "links": [],
        "x": 255,
        "y": 840,
        "wires": [
            [
                "ddbef328f7151428"
            ]
        ]
    },
    {
        "id": "3f4ad6eb73e91522",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Hayabusa Timesketch Ingestion Failure",
        "links": [
            "c47ba0bd5dd540ee"
        ],
        "x": 255,
        "y": 900,
        "wires": [
            [
                "0d99b8c43a28aa0f"
            ]
        ]
    },
    {
        "id": "ddbef328f7151428",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Hayabusa Timesketch Ingestion Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Timesketch ingestion of Hayabusa processsed data of  \" + msg.hayabusa_out + \".csv\" +\" was successful\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 840,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "0d99b8c43a28aa0f",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Hayabusa Timesketch Ingestion Failure",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Timesketch ingestion of Hayabusa processsed data of  \" + msg.hayabusa_out + \".csv\" + \" has failed\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 900,
        "wires": [
            [
                "9a14dd7dafbb0782",
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "c350800592be9a7a",
        "type": "websocket out",
        "z": "25f311019f0d6662",
        "name": "",
        "server": "db2dfcbad2821111",
        "client": "",
        "x": 950,
        "y": 260,
        "wires": []
    },
    {
        "id": "f2b20249a3b567d0",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Plaso Generation Failure",
        "links": [
            "8a8dd12a6b036164",
            "14bab364f8feaf6e"
        ],
        "x": 255,
        "y": 360,
        "wires": [
            [
                "a30d58a6982b2b24"
            ]
        ]
    },
    {
        "id": "87a3a68763e95e33",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Plaso Generation Success",
        "links": [
            "23a644f53fb9c157",
            "2ffdc2b4eed16da7"
        ],
        "x": 255,
        "y": 420,
        "wires": [
            [
                "e24eecce70d6a6a9"
            ]
        ]
    },
    {
        "id": "a30d58a6982b2b24",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Zircolite Generation Failure",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Zircolite file generation failed for  \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e24eecce70d6a6a9",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Zircolite Generation Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"Zircolite file generation successful for  \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f23c65b6a5d402fa",
        "type": "link in",
        "z": "25f311019f0d6662",
        "name": "Notification-IN-Hayabusa Timesketch Ingestion Success",
        "links": [
            "8a7ad3746fdfc178",
            "c2df1a428cd94263"
        ],
        "x": 255,
        "y": 960,
        "wires": [
            [
                "93ac0eace4a0d5ee"
            ]
        ]
    },
    {
        "id": "93ac0eace4a0d5ee",
        "type": "function",
        "z": "25f311019f0d6662",
        "name": "Hayabusa Timesketch Ingestion Success",
        "func": "msg.payload = new Date().toISOString()  + \" - \" + \"NodeRED Processing has completed\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 960,
        "wires": [
            [
                "c350800592be9a7a"
            ]
        ]
    },
    {
        "id": "9a14dd7dafbb0782",
        "type": "slack",
        "z": "25f311019f0d6662",
        "name": "Notification to Slack",
        "channelURL": "{CHANGEME_WEBHOOKURL",
        "username": "DFIR Lab Bot",
        "emojiIcon": "",
        "channel": "",
        "x": 950,
        "y": 340,
        "wires": []
    },
    {
        "id": "66a3a03efb368439",
        "type": "switch",
        "z": "de1f8303de6271e1",
        "name": "File Type",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.exe",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.dll",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.js",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": ".*\\.doc",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.pdf",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 140,
        "y": 460,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "b2539705d750fe1a",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "Malware Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\nvar malware = msg.filename.toLowerCase();\n//var malware = msg.filename.split(\".\")[0].toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newMalware = malware;\n\n// Assigning the new filename to msg.newMalware\nmsg.malware = newMalware;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "b4a6b7935ea1e853"
            ]
        ]
    },
    {
        "id": "d17551740616596c",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "Process Malware File",
        "func": "msg.payload = \"Processing Malware file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "b2539705d750fe1a"
            ]
        ]
    },
    {
        "id": "b06e48bb4c5c6bef",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "",
        "addpay": "capa",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capa Process",
        "x": 1640,
        "y": 440,
        "wires": [
            [
                "7a40e0f66059afed"
            ],
            [
                "7a40e0f66059afed"
            ],
            [
                "7a40e0f66059afed"
            ]
        ]
    },
    {
        "id": "7a40e0f66059afed",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "ClamScan Analysis Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\nmsg.malwarehash = malwaretxt\nmsg.clam = \"--quiet --verbose --infected -r -z -i --bell \" + msg.malware + \" --log=\" + malwaretxt;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 700,
        "wires": [
            [
                "056027a22276fbf0"
            ]
        ]
    },
    {
        "id": "056027a22276fbf0",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "clamscan",
        "addpay": "clam",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capa Process",
        "x": 840,
        "y": 700,
        "wires": [
            [],
            [],
            [
                "b4a6b7935ea1e853"
            ]
        ]
    },
    {
        "id": "6b9fc033be5cee00",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "Capa Malware Analysis Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\n\n// Construct the command with the correct paths\nmsg.capa = \"/opt/capa/./capa \" + msg.malware + \" >> \" + malwaretxt;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 240,
        "wires": [
            [
                "b06e48bb4c5c6bef"
            ]
        ]
    },
    {
        "id": "e4bc0f98b5596271",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "SHA256 Extract Params",
        "func": "var malwaredir = \"/cases/malware/\";\nvar malwareresults = \"/cases/malware/results/\";\n\n// Extract the filename from msg.malware\nvar malwarefilename = msg.malware.split('/').pop().replace(/\\.(exe|dll|bin)$/, \".txt\");\nvar malwaretxt = malwareresults + malwarefilename;\nmsg.malwarehash = malwaretxt\nmsg.sha256 = msg.malware + \" >> /cases/malware/results/sha256.txt\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 320,
        "wires": [
            [
                "a6830f5044ddbe2d"
            ]
        ]
    },
    {
        "id": "a6830f5044ddbe2d",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "sha256sum",
        "addpay": "sha256",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA256 Process",
        "x": 970,
        "y": 300,
        "wires": [
            [],
            [],
            [
                "6b9fc033be5cee00"
            ]
        ]
    },
    {
        "id": "ad96ebc0d58fd6d6",
        "type": "comment",
        "z": "de1f8303de6271e1",
        "name": "Monitored Directory /cases/malware (Files)",
        "info": "",
        "x": 220,
        "y": 100,
        "wires": []
    },
    {
        "id": "f3a0195659d80158",
        "type": "function",
        "z": "de1f8303de6271e1",
        "name": "SHA256 Extract Params",
        "func": "msg.sha256 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.md5 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\nmsg.sha1 = msg.payload + \" >> /cases/processor/hashes/hashes.txt\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 420,
        "wires": [
            [
                "39a44ea92a618e8e"
            ]
        ]
    },
    {
        "id": "39a44ea92a618e8e",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "echo -n \"sha256 =  \" >> /cases/processor/hashes/hashes.txt && sha256sum",
        "addpay": "sha256",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA256 Process",
        "x": 990,
        "y": 380,
        "wires": [
            [],
            [],
            [
                "2a5870ba32d3191c"
            ]
        ]
    },
    {
        "id": "2a5870ba32d3191c",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "echo -n \"sha1 =  \" >> /cases/processor/hashes/hashes.txt && sha1sum",
        "addpay": "sha1",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "SHA1 Process",
        "x": 1020,
        "y": 440,
        "wires": [
            [],
            [],
            [
                "947dac1935665bd0"
            ]
        ]
    },
    {
        "id": "947dac1935665bd0",
        "type": "exec",
        "z": "de1f8303de6271e1",
        "command": "echo -n \"md5 = \" >> /cases/processor/hashes/hashes.txt && md5sum",
        "addpay": "md5",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "MD5 Process",
        "x": 1040,
        "y": 520,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "59f759a24ccace97",
        "type": "comment",
        "z": "de1f8303de6271e1",
        "name": "Need to FIX THIS!!!!!",
        "info": "",
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "fc61b69b39218a89",
        "type": "watch-directory",
        "z": "de1f8303de6271e1",
        "folder": "/cases/malware/",
        "recursive": "0",
        "typeEvent": "create",
        "ignoreInitial": true,
        "ignoredFiles": "",
        "ignoredFilesType": "re",
        "name": "Watch for Triage Archives",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "d17551740616596c"
            ]
        ]
    },
    {
        "id": "b4a6b7935ea1e853",
        "type": "simple-queue",
        "z": "de1f8303de6271e1",
        "name": "Queue Files",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "e4bc0f98b5596271",
                "f3a0195659d80158"
            ]
        ]
    },
    {
        "id": "00d7490ddc0f3e90",
        "type": "comment",
        "z": "2c32c57ee0c89b2b",
        "name": "https://github.com/omriher/CapTipper/tree/python3_support",
        "info": "",
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "84d7cd3a2988674f",
        "type": "link in",
        "z": "018a08567380648f",
        "name": "E01 Process",
        "links": [
            "519e07706b40afdf"
        ],
        "x": 325,
        "y": 80,
        "wires": [
            [
                "b339a836f7ca03ae"
            ]
        ]
    },
    {
        "id": "ee130db70346c33f",
        "type": "exec",
        "z": "018a08567380648f",
        "d": true,
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 980,
        "y": 200,
        "wires": [
            [
                "0f932134f11e8b6e"
            ],
            [
                "0f932134f11e8b6e"
            ],
            [
                "0f932134f11e8b6e",
                "2bd019c605416de5"
            ]
        ]
    },
    {
        "id": "b2bf11153e48a136",
        "type": "comment",
        "z": "018a08567380648f",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "2bd019c605416de5",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 520,
        "wires": [
            [
                "db693363311281a4"
            ],
            []
        ]
    },
    {
        "id": "b339a836f7ca03ae",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Process E01",
        "func": "msg.payload = \"Processing E01 file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "dc4074416e6e3849"
            ]
        ]
    },
    {
        "id": "da564fec28f9243d",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 440,
        "y": 640,
        "wires": [
            [
                "1df15e484d36e88b"
            ],
            [
                "1df15e484d36e88b"
            ],
            [
                "fedc039bcdadc4c6",
                "1df15e484d36e88b"
            ]
        ]
    },
    {
        "id": "fedc039bcdadc4c6",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 780,
        "y": 660,
        "wires": [
            [
                "1041bedb2602c848"
            ],
            [
                "ba84680f025893b0"
            ]
        ]
    },
    {
        "id": "ba84680f025893b0",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 680,
        "wires": []
    },
    {
        "id": "dc4074416e6e3849",
        "type": "function",
        "z": "018a08567380648f",
        "name": "E01 Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\n//var plasoname = msg.filename.toLowerCase();\nvar plasoname = msg.filename.split(\".\")[0].toLowerCase();\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasofname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 160,
        "wires": [
            [
                "6971bb5a28eb4ede"
            ]
        ]
    },
    {
        "id": "6971bb5a28eb4ede",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "// This Function node prepares an HTTP request for the TITAN_Processor API to run log2timeline.\n// It assumes msg.filename contains the full path to the input image file, \n// e.g., /cases/processor/your_image.e01\n\nnode.warn(\"Node-RED: Preparing to call TITAN_Processor API at http://titan_processor:5005/run_log2timeline\");\n\nvar plasoOutputDir = \"/cases/plaso/\";  // Directory where .plaso files will be stored\n\n// Extract a base filename (e.g., \"your_image\" from \"/cases/processor/your_image.e01\")\nvar baseFilename = \"\";\nif (msg.filename && typeof msg.filename === 'string') {\n    try {\n        baseFilename = msg.filename.split(\"/\").pop().split(\".\")[0].toLowerCase();\n    } catch (e) {\n        node.error(\"Could not derive baseFilename from msg.filename: \" + e.message, msg);\n        baseFilename = \"unknown_image\";\n    }\n} else {\n    node.error(\"msg.filename is missing or not a string! Cannot create Plaso output name.\", msg);\n    return null; // Stop flow if filename is invalid\n}\n\n// Creating a Timestamp for unique filenames\nvar timestamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\nmsg.tstamp = timestamp; // Store timestamp on msg if needed by later nodes\n\n// Creating the full storage file path for the .plaso output.\nvar outputPlasoFile = plasoOutputDir + baseFilename + \"_\" + timestamp + \".plaso\";\n\n// Store this output path on the msg object so subsequent nodes (like the one\n// preparing the timesketch_importer command) can access it.\nmsg.plaso_output_file = outputPlasoFile;\n\n// Store a clean base name for other jobs if needed. This is useful for consistency.\nmsg.job_base_name = baseFilename + \"_\" + timestamp;\n\n// Log2timeline Options string (these are the command-line flags for log2timeline.py)\nvar log2timelineOptions = \"--partitions all --status_view none --parsers filestat,winreg,esedb,binary_cookies,chrome_cache,chrome_preferences,custom_destinations,czip,firefox_cache,firefox_cache2,java_idx,jsonl,lnk,mcafee_protection,msiecf,olecf,opera_global,opera_typed_history,pe,prefetch,recycle_bin,recycle_bin_info2,sqlite,symantec_scanlog,text,trendmicro_url,trendmicro_vd,windefender_history,winevt,winevtx,winjob\";\n\n// Prepare the JSON payload to be sent to the TITAN_Processor API\nmsg.payload = {\n    input_file: msg.filename,         // Full path to the source E01 file\n    output_file: outputPlasoFile,     // Full path where TITAN_Processor should save the .plaso file\n    options_str: log2timelineOptions  // Options string for log2timeline.py\n};\n\n// Set up the properties for the 'http request' node that will follow this Function node\nmsg.url = \"http://titan_processor:5005/run_log2timeline\"; // URL of your Flask API endpoint\nmsg.method = \"POST\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nnode.warn(\"Node-RED: API Payload for /run_log2timeline: \" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 160,
        "wires": [
            [
                "ee130db70346c33f",
                "ac1ef0954e83d3e1"
            ]
        ]
    },
    {
        "id": "db693363311281a4",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Timesketch CLI params",
        "func": "//var plasoname = msg.plasoname\n//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\n//msg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.filename + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\n//return msg;\n\nvar plasofullpath = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\nmsg.tsimport = \"-u titan -p admin --host http://127.0.0.1 --timeline_name \" + plasofullpath + \"-triage\" + \" --sketch_id \" + \"4\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 540,
        "wires": [
            [
                "da564fec28f9243d"
            ]
        ]
    },
    {
        "id": "c4d94f0203d8a451",
        "type": "function",
        "z": "018a08567380648f",
        "d": true,
        "name": "Log2timeline psort - plaso to csv params",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\nvar plasocsv = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\n//var storageFilePath = plasoname + \".plaso\";\nmsg.psort = \"psort.py -o dynamic -w \" + plasofname + msg.tstamp + \".csv\" + \" \" + plasocsv;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 260,
        "wires": [
            [
                "4c7fa5331782add3"
            ]
        ]
    },
    {
        "id": "4c7fa5331782add3",
        "type": "exec",
        "z": "018a08567380648f",
        "d": true,
        "command": "",
        "addpay": "psort",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline psort Process",
        "x": 640,
        "y": 260,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "1041bedb2602c848",
        "type": "function",
        "z": "018a08567380648f",
        "name": "E01 Mount Image Process Variables",
        "func": "msg.dir = '/cases/processor'\nmsg.filehashmount_exec = 'sudo python3 /home/titan/Downloads/TITAN/hash_mountimages.py -d ' + msg.dir;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 760,
        "wires": [
            [
                "31b88a63ec5cdfec"
            ]
        ]
    },
    {
        "id": "31b88a63ec5cdfec",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "",
        "addpay": "filehashmount_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Filehash Process",
        "x": 570,
        "y": 820,
        "wires": [
            [
                "05026c88d31fd508"
            ],
            [
                "05026c88d31fd508"
            ],
            [
                "05026c88d31fd508",
                "c062be4a0d455a75"
            ]
        ]
    },
    {
        "id": "21f5406ab9dc7d7e",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 800,
        "y": 1180,
        "wires": [
            [
                "5a32ca6bde0bb696"
            ],
            [
                "5a32ca6bde0bb696"
            ],
            [
                "9e908fe2024c6e4f",
                "5a32ca6bde0bb696"
            ]
        ]
    },
    {
        "id": "9e908fe2024c6e4f",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1100,
        "y": 1180,
        "wires": [
            [
                "c7240fba3c267f93"
            ],
            [
                "3079db6da49a5fc5"
            ]
        ]
    },
    {
        "id": "3079db6da49a5fc5",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 960,
        "wires": []
    },
    {
        "id": "0f932134f11e8b6e",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 377",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 280,
        "wires": []
    },
    {
        "id": "1df15e484d36e88b",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 379",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 500,
        "wires": []
    },
    {
        "id": "05026c88d31fd508",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 380",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 800,
        "wires": []
    },
    {
        "id": "60f7b7909a351e50",
        "type": "function",
        "z": "018a08567380648f",
        "name": "Timesketch CLI params",
        "func": "// Extract the original filename including the extension\nvar baseFilename = msg.filename.split(\"/\").pop();  // This keeps the full filename with the extension\n\n// Replace the extension with \".jsonl\"\nvar jsonlFilename = baseFilename.replace(/\\.[^/.]+$/, \".jsonl\");\n\n// The path where the .jsonl file is stored after the Python script runs\nvar jsonlFilePath = \"/cases/processor/hashes/\" + jsonlFilename;\n\n// Construct the Timesketch import command using the .jsonl file path\nmsg.tsimport = \"-u titan -p admin --host http://127.0.0.1 --timeline_name \" + baseFilename + \"-filehashes\" + \" --sketch_id 4 \" + jsonlFilePath;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1160,
        "wires": [
            [
                "21f5406ab9dc7d7e"
            ]
        ]
    },
    {
        "id": "c7240fba3c267f93",
        "type": "function",
        "z": "018a08567380648f",
        "name": "VR Zircolite Process Variables",
        "func": "// Create a variable to store the EVTX directory path\nmsg.collection = '/mnt/partition_0/Windows/System32/winevt/Logs';\n// convert above to if and else statements for all ohter partitions\n// msg.collection = msg.dirname + '/uploads/auto/' + decodeURIComponent('C%3A/Windows/System32/winevt/Logs');\n\nmsg.zircolite_job = msg.plasofname + '-zircolite';\nmsg.zircolite_out = '/cases/' + msg.zircolite_job;\nmsg.zircolite_exec = 'sudo -u titan python3 /opt/Zircolite-2.20.0/zircolite.py --evtx ' + msg.collection + ' --ruleset /opt/Zircolite-2.20.0/rules/rules_windows_generic_full.json --template /opt/Zircolite-2.20.0/templates/exportForZircoGui.tmpl --templateOutput /opt/Zircolite-2.20.0/data.js --evtx_dump /opt/Zircolite-2.20.0/bin/evtx_dump_lin --config /opt/Zircolite-2.20.0/config/fieldMappings.json > /tmp/zircolite_out.log 2>&1';// Log the constructed command for debuggingnode.warn(\"Constructed Command: \" + msg.zircolite_exec);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1280,
        "wires": [
            [
                "29dec5eef1a47551"
            ]
        ]
    },
    {
        "id": "29dec5eef1a47551",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "",
        "addpay": "zircolite_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Zircolite Process",
        "x": 680,
        "y": 1300,
        "wires": [
            [
                "84cb54cf7a63c21a"
            ],
            [
                "84cb54cf7a63c21a"
            ],
            [
                "fadb0497e4b53974",
                "84cb54cf7a63c21a"
            ]
        ]
    },
    {
        "id": "fadb0497e4b53974",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Zircolite Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 1360,
        "wires": [
            [
                "3889e6355db63637"
            ],
            []
        ]
    },
    {
        "id": "2ffdc2b4eed16da7",
        "type": "link out",
        "z": "018a08567380648f",
        "name": "Notification-OUT-Zircolite-Success",
        "mode": "link",
        "links": [
            "87a3a68763e95e33",
            "a05e730349905e6d"
        ],
        "x": 1285,
        "y": 1160,
        "wires": []
    },
    {
        "id": "14bab364f8feaf6e",
        "type": "link out",
        "z": "018a08567380648f",
        "name": "Notification-OUT-Zircolite Failure",
        "mode": "link",
        "links": [
            "bc9fb963b0687733",
            "f2b20249a3b567d0"
        ],
        "x": 1255,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c062be4a0d455a75",
        "type": "function",
        "z": "018a08567380648f",
        "name": "E01 Filehash Process Variables",
        "func": "msg.dir = '/cases/processor'\nmsg.filehashprocess_exec = 'sudo python3 /home/titan/Downloads/TITAN/hash_filehash.py -i ' + msg.filename + ' -o /cases/processor/hashes';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 940,
        "wires": [
            [
                "e7b963bd076a6ff0"
            ]
        ]
    },
    {
        "id": "e7b963bd076a6ff0",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "",
        "addpay": "filehashprocess_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Filehash Process",
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "58219fc294452814"
            ],
            [
                "58219fc294452814"
            ],
            [
                "60f7b7909a351e50",
                "58219fc294452814"
            ]
        ]
    },
    {
        "id": "26a2f34390241261",
        "type": "function",
        "z": "018a08567380648f",
        "name": "E01 Unmount Process Variables",
        "func": "msg.dir = '/cases/processor'\nmsg.filehashunmount_exec = 'sudo python3 /home/titan/Downloads/TITAN/hash_unmountimages.py';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1840,
        "wires": [
            [
                "63f85cf9ea3a5a57"
            ]
        ]
    },
    {
        "id": "63f85cf9ea3a5a57",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "",
        "addpay": "filehashunmount_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Filehash Process",
        "x": 750,
        "y": 1860,
        "wires": [
            [
                "24e258ebe0b6d428"
            ],
            [
                "24e258ebe0b6d428"
            ],
            [
                "24e258ebe0b6d428"
            ]
        ]
    },
    {
        "id": "58219fc294452814",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 381",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 940,
        "wires": []
    },
    {
        "id": "5a32ca6bde0bb696",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 382",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1100,
        "wires": []
    },
    {
        "id": "84cb54cf7a63c21a",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 383",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1460,
        "wires": []
    },
    {
        "id": "3889e6355db63637",
        "type": "function",
        "z": "018a08567380648f",
        "name": "KAPE Hayabusa Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = '/mnt/partition_0/Windows/System32/winevt/Logs';\nmsg.hayabusa_job = msg.plasofname + '-hayabusa';\nmsg.hayabusa_out = '/cases/evtxproc/' + msg.hayabusa_job;\nmsg.hayabusa_exec =  'csv-timeline -d ' +msg.kape+ ' --RFC-3339 -o ' + msg.hayabusa_out + '.csv' + ' -p timesketch-verbose -U --no-wizard'\nmsg.hayabusa_ts = \"-u titan -p admin --host http://127.0.0.1 --timeline_name \" + msg.hayabusa_job + \" --sketch_id \" + \"4 \" + msg.hayabusa_out + '.csv';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1420,
        "wires": [
            [
                "15b62e28f6fa53bc"
            ]
        ]
    },
    {
        "id": "15b62e28f6fa53bc",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "/opt/hayabusa/./hayabusa ",
        "addpay": "hayabusa_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Hayabusa Evtx Process",
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "e8a3f116ab5056a6"
            ],
            [
                "e8a3f116ab5056a6"
            ],
            [
                "cecb8efd63422fed",
                "e8a3f116ab5056a6"
            ]
        ]
    },
    {
        "id": "cecb8efd63422fed",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "timesketch_importer",
        "addpay": "hayabusa_ts",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Ingest Hayabusa data",
        "x": 560,
        "y": 1540,
        "wires": [
            [
                "1b75894f5f61ff29",
                "e8a3f116ab5056a6"
            ],
            [
                "1b75894f5f61ff29",
                "e8a3f116ab5056a6"
            ],
            [
                "1b75894f5f61ff29",
                "e8a3f116ab5056a6"
            ]
        ]
    },
    {
        "id": "1b75894f5f61ff29",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Hayabusa Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 860,
        "y": 1560,
        "wires": [
            [
                "85879d4ee40e450a"
            ],
            []
        ]
    },
    {
        "id": "85879d4ee40e450a",
        "type": "function",
        "z": "018a08567380648f",
        "name": "KAPE Chainsaw Process Variables",
        "func": "//Create a variable to store the EVTX directory path\nmsg.kape = msg.dirname + '/mnt/partition_0/Windows/System32/winevt/Logs';\nmsg.chainsaw_job = + msg.plasofname + '-chainsaw';\nmsg.chainsaw_dir = msg.plasofname;\nmsg.chainsaw_files = '/cases/evtxproc/chainsaw/' + msg.plasofname + '/';\nmsg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.chainsaw_dir;\n//msg.chainsaw_out = '/cases/evtxproc/chainsaw/' + msg.plasofname ;\nmsg.chainsaw_exec = 'hunt -q ' + msg.kape + ' -s /opt/chainsaw/sigma/ --mapping /opt/chainsaw/mappings/sigma-event-logs-all.yml -r /opt/chainsaw/rules/ --csv --output ' + msg.chainsaw_out;\nmsg.chainsaw_ts1 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_antivirus\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"antivirus.csv\";\nmsg.chainsaw_ts2 = \"-u titan -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rds_events_-_user_profile_disk\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"microsoft_rds_events_-_user_profile_disk.csv\";\nmsg.chainsaw_ts3 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-hainsaw_powershell_script.\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"powershell_script.csv\";\nmsg.chainsaw_ts4 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_rdp_events\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"rdp_events.csv\";\nmsg.chainsaw_ts5 = \"-u titan -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts6 = \"-u titan -p admin --host http://127.0.0.1 ---timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_sigma\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"sigma.csv\";\nmsg.chainsaw_ts7 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_account_tampering\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"account_tampering.csv\";\nmsg.chainsaw_ts8 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_applocker\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"applocker.csv\";\nmsg.chainsaw_ts9 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_credential_access\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"credential_access.csv\";\nmsg.chainsaw_ts10 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_defensive_evasion\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"defensive_evasion.csv\";\nmsg.chainsaw_ts11 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_lateral_movement\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"lateral_movement.csv\";\nmsg.chainsaw_ts12 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_log_tampering\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"log_tampering.csv\";\nmsg.chainsaw_ts13 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_login_attacks\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"login_attacks.csv\";\nmsg.chainsaw_ts14 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_microsoft_rasvpn_events\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"microsoft_rasvpn_events.csv\";\nmsg.chainsaw_ts15 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_installation\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"service_installation.csv\";\nmsg.chainsaw_ts16 = \"-u titan -p admin --host http://127.0.0.1 --timeline_name\" + \" \" + msg.plasofname + \"-chainsaw_service_tampering\" + \" --sketch_id \" + \"4 \" + msg.chainsaw_files + \"service_tampering.csv\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1640,
        "wires": [
            [
                "c5d2cd3ae7036b82"
            ]
        ]
    },
    {
        "id": "c5d2cd3ae7036b82",
        "type": "exec",
        "z": "018a08567380648f",
        "command": "/opt/chainsaw/./chainsaw ",
        "addpay": "chainsaw_exec",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Chainsaw Evtx Process",
        "x": 490,
        "y": 1660,
        "wires": [
            [
                "ab52f84edbe88a67"
            ],
            [
                "ab52f84edbe88a67"
            ],
            [
                "ace0bdfaf1ced287",
                "ab52f84edbe88a67"
            ]
        ]
    },
    {
        "id": "ace0bdfaf1ced287",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Evtx Process Status",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 780,
        "y": 1720,
        "wires": [
            [
                "d0eb0f234d9a3a71"
            ],
            []
        ]
    },
    {
        "id": "d0eb0f234d9a3a71",
        "type": "link out",
        "z": "018a08567380648f",
        "name": "Chainsaw Process",
        "mode": "link",
        "links": [
            "a8a370357488b800"
        ],
        "x": 955,
        "y": 1820,
        "wires": []
    },
    {
        "id": "deb1f0c1f71c12b2",
        "type": "link in",
        "z": "018a08567380648f",
        "name": "Output Chainsaw Process",
        "links": [
            "1b3d5967be2bbeb8"
        ],
        "x": 1035,
        "y": 1700,
        "wires": [
            [
                "97f518c09a116d08"
            ]
        ]
    },
    {
        "id": "97f518c09a116d08",
        "type": "switch",
        "z": "018a08567380648f",
        "name": "Chainsaw Out to Timesketch",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1240,
        "y": 1640,
        "wires": [
            [
                "26a2f34390241261"
            ],
            []
        ]
    },
    {
        "id": "e8a3f116ab5056a6",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 384",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1440,
        "wires": []
    },
    {
        "id": "ab52f84edbe88a67",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 385",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 1740,
        "wires": []
    },
    {
        "id": "24e258ebe0b6d428",
        "type": "debug",
        "z": "018a08567380648f",
        "name": "debug 386",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1940,
        "wires": []
    },
    {
        "id": "ac1ef0954e83d3e1",
        "type": "http request",
        "z": "018a08567380648f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "236dcee18367a244",
        "type": "link in",
        "z": "ff0d2698d578dcb2",
        "name": "VHD Process",
        "links": [
            "dccc0af765f16871"
        ],
        "x": 75,
        "y": 80,
        "wires": [
            [
                "3fec1120718770d5"
            ]
        ]
    },
    {
        "id": "afd054c9ce723c46",
        "type": "exec",
        "z": "ff0d2698d578dcb2",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 1020,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "e30d39af9819cc49",
                "d37dd7c3cf614ca9"
            ]
        ]
    },
    {
        "id": "e0294028f923f488",
        "type": "comment",
        "z": "ff0d2698d578dcb2",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "e30d39af9819cc49",
        "type": "switch",
        "z": "ff0d2698d578dcb2",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 460,
        "wires": [
            [
                "1ce8f7382b57c43f"
            ],
            []
        ]
    },
    {
        "id": "7c4f79e10a45de36",
        "type": "exec",
        "z": "ff0d2698d578dcb2",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 400,
        "y": 560,
        "wires": [
            [],
            [],
            [
                "cff0d7c2eec2b311",
                "277219aa72300a53"
            ]
        ]
    },
    {
        "id": "cff0d7c2eec2b311",
        "type": "switch",
        "z": "ff0d2698d578dcb2",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 560,
        "wires": [
            [],
            [
                "b24f7182fb3ff677",
                "1c89f24e66f6ccb4"
            ]
        ]
    },
    {
        "id": "b24f7182fb3ff677",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 560,
        "wires": []
    },
    {
        "id": "870571f16ceb74b6",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "VHD Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\n//var plasoname = msg.filename.toLowerCase();\nvar plasoname = msg.filename.split(\".\")[0].toLowerCase();\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasofname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "8549e96e32ac6fca"
            ]
        ]
    },
    {
        "id": "8549e96e32ac6fca",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "var plasodir = \"/cases/processor/\";\nvar plasofname = msg.plasoname.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + plasofname + msg.tstamp + \".plaso\" + \" \" + msg.filename;\nreturn msg;\n\n//var plasodir = \"/cases/plaso/\";\n//var plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\n//msg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\n//return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "afd054c9ce723c46",
                "7d78c5083a03b982"
            ]
        ]
    },
    {
        "id": "1ce8f7382b57c43f",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "Timesketch CLI params",
        "func": "//var plasoname = msg.plasoname\n//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\n//msg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.filename + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\n//return msg;\n\nvar plasofullpath = msg.plasoname.replace(\"/cases/processor/\", \"/cases/plaso/\") + msg.tstamp + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + plasofullpath + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + plasofullpath;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "7c4f79e10a45de36",
                "24b2fbf9986967ee"
            ]
        ]
    },
    {
        "id": "a98cbd5e90fb896b",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 300,
        "wires": []
    },
    {
        "id": "7d78c5083a03b982",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 380,
        "wires": []
    },
    {
        "id": "d37dd7c3cf614ca9",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 360,
        "wires": []
    },
    {
        "id": "52b88928d028225c",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "d": true,
        "name": "VHD Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.filedirname;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.file.split(\".\")[0];\nvar filename = plasofname.toLowerCase();\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\nvar plasofname = filename + msg.tstamp + \"Z\";\nmsg.filename = plasoname.toLowerCase();\nmsg.plasoname = msg.filename\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [
                "8549e96e32ac6fca"
            ]
        ]
    },
    {
        "id": "24b2fbf9986967ee",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 680,
        "wires": []
    },
    {
        "id": "277219aa72300a53",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 680,
        "wires": []
    },
    {
        "id": "1c89f24e66f6ccb4",
        "type": "debug",
        "z": "ff0d2698d578dcb2",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 680,
        "wires": []
    },
    {
        "id": "3fec1120718770d5",
        "type": "function",
        "z": "ff0d2698d578dcb2",
        "name": "Process VHD",
        "func": "msg.payload = \"Processing VHD file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "870571f16ceb74b6",
                "52b88928d028225c"
            ]
        ]
    },
    {
        "id": "abc43a287b554b44",
        "type": "link in",
        "z": "a3bca09fa64d5135",
        "name": "VMDK Process",
        "links": [
            "5d88f249dc4c5a80"
        ],
        "x": 45,
        "y": 80,
        "wires": [
            [
                "22ca046e75b8e9d2"
            ]
        ]
    },
    {
        "id": "b34940a8958614e4",
        "type": "exec",
        "z": "a3bca09fa64d5135",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 900,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "01c1d8b99c81072a"
            ]
        ]
    },
    {
        "id": "4295dc86f008a7a1",
        "type": "comment",
        "z": "a3bca09fa64d5135",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "01c1d8b99c81072a",
        "type": "switch",
        "z": "a3bca09fa64d5135",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 220,
        "wires": [
            [],
            [
                "abb5b95994ba6a21"
            ]
        ]
    },
    {
        "id": "22ca046e75b8e9d2",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "Process VMDK",
        "func": "msg.payload = \"Processing VMDK file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 160,
        "wires": [
            [
                "8b805f689d8a9797"
            ]
        ]
    },
    {
        "id": "ddd73ab8d736dd78",
        "type": "exec",
        "z": "a3bca09fa64d5135",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 300,
        "y": 320,
        "wires": [
            [],
            [],
            [
                "a546baa55d0427ca"
            ]
        ]
    },
    {
        "id": "a546baa55d0427ca",
        "type": "switch",
        "z": "a3bca09fa64d5135",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 320,
        "wires": [
            [],
            [
                "0f1c740a853f599c"
            ]
        ]
    },
    {
        "id": "0f1c740a853f599c",
        "type": "debug",
        "z": "a3bca09fa64d5135",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "8b805f689d8a9797",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "VMDK Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.dirfile;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.filename.toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasoname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "970bf3b5f31665c1"
            ]
        ]
    },
    {
        "id": "970bf3b5f31665c1",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "//var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "b34940a8958614e4"
            ]
        ]
    },
    {
        "id": "abb5b95994ba6a21",
        "type": "function",
        "z": "a3bca09fa64d5135",
        "name": "Timesketch CLI params",
        "func": "//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasoname + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + msg.plasoname + \".plaso\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "ddd73ab8d736dd78"
            ]
        ]
    },
    {
        "id": "1896b282f8d5a850",
        "type": "link in",
        "z": "bb185f14c626bdfb",
        "name": "VHDX Process",
        "links": [
            "1f168e07a0d53239"
        ],
        "x": 225,
        "y": 100,
        "wires": [
            [
                "a10941afa6864b64"
            ]
        ]
    },
    {
        "id": "7f58ebe8d0869039",
        "type": "exec",
        "z": "bb185f14c626bdfb",
        "command": "",
        "addpay": "l2tcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Log2timeline Process",
        "x": 940,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "e2456751ba44f0fa"
            ]
        ]
    },
    {
        "id": "4671dff25fbedda4",
        "type": "comment",
        "z": "bb185f14c626bdfb",
        "name": "Change Log2timeline params here",
        "info": "",
        "x": 660,
        "y": 120,
        "wires": []
    },
    {
        "id": "e2456751ba44f0fa",
        "type": "switch",
        "z": "bb185f14c626bdfb",
        "name": "Plaso Success",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 240,
        "wires": [
            [],
            [
                "607a7ef1639dae0e"
            ]
        ]
    },
    {
        "id": "a10941afa6864b64",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "Process VHDX",
        "func": "msg.payload = \"Processing VHDX file: \" + msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 180,
        "wires": [
            [
                "71208e0ed3297239"
            ]
        ]
    },
    {
        "id": "5d5208cf034a867e",
        "type": "exec",
        "z": "bb185f14c626bdfb",
        "command": "timesketch_importer",
        "addpay": "tsimport",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Timesketch Import Process",
        "x": 340,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "76b81edbd03448f0"
            ]
        ]
    },
    {
        "id": "76b81edbd03448f0",
        "type": "switch",
        "z": "bb185f14c626bdfb",
        "name": "Timesketch Process Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 340,
        "wires": [
            [],
            [
                "21cde48ba5e15205"
            ]
        ]
    },
    {
        "id": "21cde48ba5e15205",
        "type": "debug",
        "z": "bb185f14c626bdfb",
        "name": "Timesketch Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "71208e0ed3297239",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "VHDX Variable Setup",
        "func": "// Setting up directory path of the file upload\nmsg.config = {};\nmsg.config.start = msg.dirfile;\n\n// Setting up vars to handle archive decompress operations\nvar plasoname = msg.filename.toLowerCase();\n\n// Creating a Timestamp\nmsg.tstamp = new Date().toISOString().substring(0, 19).replace(/-/g, \"\").replace(/:/g, \"\");\n\n// Creating a File Name\nvar newFilename = plasoname;\n\n// Assigning the new filename to msg.plasoname\nmsg.plasoname = newFilename;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "32cc197d33db7759"
            ]
        ]
    },
    {
        "id": "32cc197d33db7759",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "Set-Log2timeline CLI params - backup",
        "func": "//var plasodir = \"/cases/plaso/\";\nvar plasoname = msg.filename.replace('processor', 'plaso');\n//var storageFilePath = plasoname + \".plaso\";\nmsg.l2tcli = \"log2timeline.py --partitions all --status_view none --storage-file \" + msg.plasoname + \".plaso\" + \" \" + msg.filename;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "7f58ebe8d0869039"
            ]
        ]
    },
    {
        "id": "607a7ef1639dae0e",
        "type": "function",
        "z": "bb185f14c626bdfb",
        "name": "Timesketch CLI params",
        "func": "//var plasofullpath = \"/cases/plaso/\" + msg.plasoname + \".plaso\";\nmsg.tsimport = \"-u dfir -p admin --host http://127.0.0.1 --timeline_name \" + msg.plasoname + \"-triage\" + \" --sketch_id \" + \"5\" + \" \" + msg.plasoname + \".plaso\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "5d5208cf034a867e"
            ]
        ]
    },
    {
        "id": "2bc81654eb0f04a0",
        "type": "template",
        "z": "b51775f24f84f581",
        "name": "Simple Web Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE HTML>\n<html>\n\n<head>\n    <title>Simple Live Display</title>\n    <style>\n        body {\n            background-color: black;\n            color: #00FF00;\n            font-family: Arial, sans-serif;\n        }\n        .message-container {\n            max-height: 400px;\n            overflow-y: scroll;\n            border: 1px solid #00FF00;\n            padding: 10px;\n            margin-top: 20px;\n        }\n        button {\n            background-color: black;\n            border: 1px solid #00FF00;\n            color: #00FF00;\n            padding: 10px 20px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 16px;\n            margin: 4px 2px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #00FF00;\n            color: black;\n        }\n        hr {\n            border: 1px solid #00FF00;\n        }\n        h1 {\n            font-size: 32px;\n            margin-top: 20px;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        var ws;\n        var wsUri = \"ws:\";\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n        wsUri += \"//\" + loc.host + loc.pathname.replace(\"progress\", \"ws/progress\");\n\n        function wsConnect() {\n            console.log(\"connect\", wsUri);\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function (msg) {\n                var data = msg.data;\n                addMessage(data);\n            }\n            ws.onopen = function () {\n                document.getElementById('status').innerHTML = \"connected\";\n                console.log(\"connected\");\n            }\n            ws.onclose = function () {\n                document.getElementById('status').innerHTML = \"not connected\";\n                setTimeout(wsConnect, 3000);\n            }\n        }\n\n        function addMessage(data) {\n            var messages = JSON.parse(localStorage.getItem('messages')) || [];\n            messages.push(data);\n            localStorage.setItem('messages', JSON.stringify(messages));\n            displayMessages();\n        }\n\n        function displayMessages() {\n            var messages = JSON.parse(localStorage.getItem('messages')) || [];\n            var messagesDiv = document.getElementById('messages');\n            messagesDiv.innerHTML = '';\n            messages.forEach(function (message) {\n                var p = document.createElement('p');\n                p.textContent = message;\n                messagesDiv.appendChild(p);\n            });\n        }\n\n        function clearMessages() {\n            localStorage.removeItem('messages');\n            displayMessages();\n        }\n\n        window.onload = function () {\n            wsConnect();\n            displayMessages();\n        }\n    </script>\n</head>\n\n<body onunload=\"ws.disconnect();\">\n    <h1>Simple Live Display</h1>\n    <div id=\"messages\" class=\"message-container\"></div>\n    <button type=\"button\" onclick=\"clearMessages();\">Clear Messages</button>\n    <button type=\"button\" onclick=\"window.location.href='http://localhost:5000/home';\">Home</button>\n    <hr />\n    <div id=\"status\">unknown</div>\n</body>\n\n</html>\n",
        "x": 358,
        "y": 320,
        "wires": [
            [
                "205513de4636f756"
            ]
        ]
    },
    {
        "id": "205513de4636f756",
        "type": "http response",
        "z": "b51775f24f84f581",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "3e231eb232fd69c7",
        "type": "http in",
        "z": "b51775f24f84f581",
        "name": "",
        "url": "/progress",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 161,
        "y": 320,
        "wires": [
            [
                "2bc81654eb0f04a0"
            ]
        ]
    },
    {
        "id": "d6525f7b183d51da",
        "type": "websocket in",
        "z": "b51775f24f84f581",
        "name": "",
        "server": "db2dfcbad2821111",
        "client": "",
        "x": 240,
        "y": 440,
        "wires": [
            [
                "b010349c963d6355"
            ]
        ]
    },
    {
        "id": "b010349c963d6355",
        "type": "debug",
        "z": "b51775f24f84f581",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 440,
        "wires": []
    },
    {
        "id": "9d715d28b4a932ae",
        "type": "switch",
        "z": "7fd75b92004ac098",
        "name": "Archive Type Detection",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.7z",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.rar",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.(gz|bz2)",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "d9d0bb7a8c9d16a9"
            ],
            [
                "825f610d85bddb87"
            ],
            [
                "9dc3e97d270d3bca"
            ],
            [
                "321a066cb61974a2"
            ],
            [
                "4a4338d66ea93999"
            ]
        ]
    },
    {
        "id": "bb4beaa62a0d33db",
        "type": "link in",
        "z": "7fd75b92004ac098",
        "name": "Identify Archive Type",
        "links": [
            "b6ecf5f15136a82b"
        ],
        "x": 115,
        "y": 160,
        "wires": [
            [
                "9d715d28b4a932ae"
            ]
        ]
    },
    {
        "id": "4a4338d66ea93999",
        "type": "debug",
        "z": "7fd75b92004ac098",
        "name": "Unsupported Archive Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 320,
        "wires": []
    },
    {
        "id": "d9d0bb7a8c9d16a9",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "unzip  -t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "Zip Integrity Check",
        "x": 530,
        "y": 80,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "71315e8395335c88",
        "type": "switch",
        "z": "7fd75b92004ac098",
        "name": "Integrity Check Result",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 140,
        "wires": [
            [
                "3a6757a824d0b781"
            ],
            [
                "ee98b2b95731d016"
            ]
        ]
    },
    {
        "id": "ee98b2b95731d016",
        "type": "debug",
        "z": "7fd75b92004ac098",
        "name": "Archive Integrity Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 180,
        "wires": []
    },
    {
        "id": "825f610d85bddb87",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "7z t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "7z Integrity Check",
        "x": 530,
        "y": 140,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "321a066cb61974a2",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "tar -tf",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "Tar Gz or Bz2 Integrity Check",
        "x": 560,
        "y": 260,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "3a6757a824d0b781",
        "type": "link out",
        "z": "7fd75b92004ac098",
        "name": "Integrity Check Passed",
        "mode": "link",
        "links": [
            "65e9ad454afcf6d1"
        ],
        "x": 1055,
        "y": 100,
        "wires": []
    },
    {
        "id": "9dc3e97d270d3bca",
        "type": "exec",
        "z": "7fd75b92004ac098",
        "command": "unrar t",
        "addpay": "filename",
        "append": "",
        "useSpawn": "false",
        "timer": "360",
        "winHide": false,
        "oldrc": false,
        "name": "WinRAR Integrity Check",
        "x": 550,
        "y": 200,
        "wires": [
            [],
            [],
            [
                "71315e8395335c88"
            ]
        ]
    },
    {
        "id": "5fd92537b38314b0",
        "type": "link in",
        "z": "bc372fc61e93398a",
        "name": "DecompressIn",
        "links": [
            "f1ea48448bbde595"
        ],
        "x": 215,
        "y": 160,
        "wires": [
            [
                "7f64c3e43c1af844"
            ]
        ]
    },
    {
        "id": "7f64c3e43c1af844",
        "type": "switch",
        "z": "bc372fc61e93398a",
        "name": "Decompress Archive",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": ".*\\.zip",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.7z",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.rar",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.gz",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": ".*\\.tar.bz2",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 400,
        "y": 160,
        "wires": [
            [
                "4a960a020b633b75"
            ],
            [
                "ea681456f4cd7b62"
            ],
            [
                "9f812794c347bcfc"
            ],
            [
                "f534bd58ca16b78c"
            ],
            [
                "6516971a7534de22"
            ],
            [
                "095af03c967a27c6"
            ]
        ]
    },
    {
        "id": "095af03c967a27c6",
        "type": "debug",
        "z": "bc372fc61e93398a",
        "name": "Unsupported File Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 340,
        "wires": []
    },
    {
        "id": "4a960a020b633b75",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "unzip",
        "addpay": "unzipcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Unzip Decompress",
        "x": 650,
        "y": 40,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "ea681456f4cd7b62",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "7z",
        "addpay": "sevzipcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "7zip Decompress",
        "x": 650,
        "y": 100,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "f534bd58ca16b78c",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "tar",
        "addpay": "targzcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "TarGzip Decompress",
        "x": 660,
        "y": 220,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "e8aed768bff52623",
        "type": "link out",
        "z": "bc372fc61e93398a",
        "name": "Decompress Status Out",
        "mode": "link",
        "links": [
            "a9c3989928f3fee0"
        ],
        "x": 955,
        "y": 100,
        "wires": []
    },
    {
        "id": "9f812794c347bcfc",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "unrar",
        "addpay": "unrarcli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "WinRAR Decompress",
        "x": 660,
        "y": 160,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "6516971a7534de22",
        "type": "exec",
        "z": "bc372fc61e93398a",
        "command": "tar",
        "addpay": "tarbz2cli",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "TarBzip2 Decompress",
        "x": 660,
        "y": 280,
        "wires": [
            [],
            [],
            [
                "e8aed768bff52623"
            ]
        ]
    },
    {
        "id": "trigger-image-processing",
        "type": "inject",
        "z": "727c4a56a7a15f93",
        "name": "Start Processing",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "assign-titan"
            ]
        ]
    },
    {
        "id": "assign-titan",
        "type": "function",
        "z": "727c4a56a7a15f93",
        "name": "Assign TITAN Container",
        "func": "var titanList = ['titan_docker-titan-1', 'titan_docker-titan-2', 'titan_docker-titan-3', 'titan_docker-titan-4', 'titan_docker-titan-5'];\nvar counter = context.get('counter') || 0;\n\nmsg.container = titanList[counter];\ncounter = (counter + 1) % titanList.length;\ncontext.set('counter', counter);\n\nmsg.payload = `docker exec ${msg.container} python3 /mnt/TITAN/titan.py --process /cases/image${counter}.E01`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 320,
        "wires": [
            [
                "run-docker-cmd"
            ]
        ]
    },
    {
        "id": "run-docker-cmd",
        "type": "exec",
        "z": "727c4a56a7a15f93",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run docker exec",
        "x": 790,
        "y": 320,
        "wires": [
            [
                "log-output"
            ],
            [],
            []
        ]
    },
    {
        "id": "log-output",
        "type": "debug",
        "z": "727c4a56a7a15f93",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1000,
        "y": 260,
        "wires": []
    }
]